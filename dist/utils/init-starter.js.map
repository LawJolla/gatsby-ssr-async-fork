{"version":3,"sources":["../../src/utils/init-starter.js"],"names":["logger","console","shouldUseYarn","stdio","e","install","rootPath","callback","prevDir","process","cwd","log","chdir","installCmd","error","stdout","stderr","toString","msg","Error","ignored","test","basename","path","copy","starterPath","copyDirectory","filter","mkdirp","mode","exists","chmodError","clone","hostInfo","url","git","noCommittish","branch","committish","cmd","remove","join","removeError","initStarter","starter","options","Promise","resolve","reject","err","value","existsSync","hostedInfo","fromUrl","module","exports"],"mappings":"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","file":"init-starter.js","sourcesContent":["/* @flow weak */\nimport { exec, execSync } from \"child_process\"\nimport hostedGitInfo from \"hosted-git-info\"\nimport fs from \"fs-extra\"\nimport sysPath from \"path\"\n\nlet logger = console\n\n// Checks the existence of yarn package\n// We use yarnpkg instead of yarn to avoid conflict with Hadoop yarn\n// Refer to https://github.com/yarnpkg/yarn/issues/673\n//\n// Returns true if yarn exists, false otherwise\nconst shouldUseYarn = () => {\n  try {\n    execSync(`yarnpkg --version`, { stdio: `ignore` })\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n// Executes `npm install` and `bower install` in rootPath.\n//\n// rootPath - String. Path to directory in which command will be executed.\n// callback - Function. Takes stderr and stdout of executed process.\n//\n// Returns nothing.\nconst install = (rootPath, callback) => {\n  const prevDir = process.cwd()\n  logger.log(`Installing packages...`)\n  process.chdir(rootPath)\n  const installCmd = shouldUseYarn() ? `yarnpkg` : `npm install`\n  exec(installCmd, (error, stdout, stderr) => {\n    process.chdir(prevDir)\n    if (stdout) console.log(stdout.toString())\n    if (error !== null) {\n      const msg = stderr.toString()\n      callback(new Error(msg))\n    }\n    callback(null, stdout)\n  })\n}\n\nconst ignored = path => !/^\\.(git|hg)$/.test(sysPath.basename(path))\n\n// Copy starter from file system.\n//\n// starterPath   - String, file system path from which files will be taken.\n// rootPath     - String, directory to which starter files will be copied.\n// callback     - Function.\n//\n// Returns nothing.\nconst copy = (starterPath, rootPath, callback) => {\n  const copyDirectory = () => {\n    fs.copy(starterPath, rootPath, { filter: ignored }, error => {\n      if (error !== null) return callback(new Error(error))\n      logger.log(`Created starter directory layout`)\n      install(rootPath, callback)\n      return false\n    })\n  }\n\n  // Chmod with 755.\n  // 493 = parseInt('755', 8)\n  fs.mkdirp(rootPath, { mode: 493 }, error => {\n    if (error !== null) callback(new Error(error))\n    return fs.exists(starterPath, exists => {\n      if (!exists) {\n        const chmodError = `starter ${starterPath} doesn't exist`\n        return callback(new Error(chmodError))\n      }\n      logger.log(`Copying local starter to ${rootPath} ...`)\n\n      copyDirectory()\n      return true\n    })\n  })\n}\n\n// Clones starter from URI.\n//\n// address     - String, URI. https:, github: or git: may be used.\n// rootPath    - String, directory to which starter files will be copied.\n// callback    - Function.\n//\n// Returns nothing.\nconst clone = (hostInfo, rootPath, callback) => {\n  const url = hostInfo.git({ noCommittish: true })\n  const branch = hostInfo.committish ? `-b ${hostInfo.committish}` : ``\n\n  logger.log(`Cloning git repo ${url} to ${rootPath}...`)\n  const cmd = `git clone ${branch} ${url} ${rootPath} --single-branch`\n\n  exec(cmd, (error, stdout, stderr) => {\n    if (error !== null) {\n      return callback(new Error(`Git clone error: ${stderr.toString()}`))\n    }\n    logger.log(`Created starter directory layout`)\n    return fs.remove(sysPath.join(rootPath, `.git`), removeError => {\n      if (error !== null) return callback(new Error(removeError))\n      install(rootPath, callback)\n      return true\n    })\n  })\n}\n\n// Main function that clones or copies the starter.\n//\n// starter    - String, file system path or URI of starter.\n// rootPath    - String, directory to which starter files will be copied.\n// callback    - Function.\n//\n// Returns nothing.\nconst initStarter = (starter, options = {}) =>\n  new Promise((resolve, reject) => {\n    const callback = (err, value) => (err ? reject(err) : resolve(value))\n\n    const cwd = process.cwd()\n    const rootPath = options.rootPath || cwd\n    if (options.logger) logger = options.logger\n\n    if (fs.existsSync(sysPath.join(rootPath, `package.json`)))\n      throw new Error(`Directory ${rootPath} is already an npm project`)\n\n    const hostedInfo = hostedGitInfo.fromUrl(starter)\n\n    if (hostedInfo) clone(hostedInfo, rootPath, callback)\n    else copy(starter, rootPath, callback)\n  })\n\nmodule.exports = initStarter\n"]}