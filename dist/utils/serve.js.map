{"version":3,"sources":["../../src/utils/serve.js"],"names":["rlInterface","createInterface","input","process","stdin","output","stdout","debug","require","startServer","program","launchPort","directory","serverPort","port","server","Server","connection","host","route","method","path","handler","listing","index","start","e","code","console","log","exit","open","info","uri","module","exports","parseInt","err","_port","error","question","answer","length","match"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAJA;AAMA,IAAMA,cAAc,mBAAGC,eAAH,CAAmB;AACrCC,SAAOC,QAAQC,KADsB;AAErCC,UAAQF,QAAQG;AAFqB,CAAnB,CAApB;;AAKA,IAAMC,QAAQC,QAAS,OAAT,EAAkB,oBAAlB,CAAd;;AAEA,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,UAA9B,EAA0C;AACxC,MAAMC,YAAYF,QAAQE,SAA1B;AACA,MAAMC,aAAaF,cAAcD,QAAQI,IAAzC;;AAEAP,QAAO,iBAAP;AACA,MAAMQ,SAAS,IAAI,eAAKC,MAAT,EAAf;;AAEAD,SAAOE,UAAP,CAAkB;AAChBC,UAAMR,QAAQQ,IADE;AAEhBJ,UAAMD;AAFU,GAAlB;;AAKAE,SAAOI,KAAP,CAAa;AACXC,YAAS,KADE;AAEXC,UAAO,UAFI;AAGXC,aAAS;AACPV,iBAAW;AACTS,cAAO,GAAET,SAAU,SADV;AAETW,iBAAS,KAFA;AAGTC,eAAO;AAHE;AADJ;AAHE,GAAb;;AAYAT,SAAOU,KAAP,CAAa,aAAK;AAChB,QAAIC,CAAJ,EAAO;AACL,UAAIA,EAAEC,IAAF,KAAY,YAAhB,EAA6B;AAC3B;AACAC,gBAAQC,GAAR,CACG,kCAAiChB,UAAW,qDAD/C;AAGD,OALD,MAKO;AACLe,gBAAQC,GAAR,CAAYH,CAAZ;AACD;;AAEDvB,cAAQ2B,IAAR;AACD,KAXD,MAWO;AACL,UAAIpB,QAAQqB,IAAZ,EAAkB;AAChB,2BAAIhB,OAAOiB,IAAP,CAAYC,GAAhB;AACD;AACDL,cAAQC,GAAR,CAAa,eAAb,EAA6Bd,OAAOiB,IAAP,CAAYC,GAAzC;AACD;AACF,GAlBD;AAmBD;;AAEDC,OAAOC,OAAP,GAAiB,mBAAW;AAC1B,MAAMrB,OACJ,OAAOJ,QAAQI,IAAf,KAAyB,QAAzB,GAAmCsB,SAAS1B,QAAQI,IAAjB,EAAuB,EAAvB,CAAnC,GAAgEJ,QAAQI,IAD1E;;AAGA,4BAAOA,IAAP,EAAa,UAACuB,GAAD,EAAMC,KAAN,EAAgB;AAC3B,QAAID,GAAJ,EAAS;AACPT,cAAQW,KAAR,CAAcF,GAAd;AACAlC,cAAQ2B,IAAR;AACD;;AAED,QAAIhB,SAASwB,KAAb,EAAoB;AAClB;AACA,UAAME,WAAY,wCAAuC1B,IAAK,kEAA9D;;AAEA,aAAOd,YAAYwC,QAAZ,CAAqBA,QAArB,EAA+B,kBAAU;AAC9C,YAAIC,OAAOC,MAAP,KAAkB,CAAlB,IAAuBD,OAAOE,KAAP,CAAa,UAAb,CAA3B,EAAqD;AACnDjC,kBAAQI,IAAR,GAAewB,KAAf;AACD;;AAED,eAAO7B,YAAYC,OAAZ,EAAqBA,QAAQI,IAA7B,CAAP;AACD,OANM,CAAP;AAOD;;AAED,WAAOL,YAAYC,OAAZ,CAAP;AACD,GApBD;AAqBD,CAzBD","file":"serve.js","sourcesContent":["/* @flow weak */\nimport detect from \"detect-port\"\nimport Hapi from \"hapi\"\nimport opn from \"opn\"\nimport rl from \"readline\"\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\nconst debug = require(`debug`)(`gatsby:application`)\n\nfunction startServer(program, launchPort) {\n  const directory = program.directory\n  const serverPort = launchPort || program.port\n\n  debug(`Serving /public`)\n  const server = new Hapi.Server()\n\n  server.connection({\n    host: program.host,\n    port: serverPort,\n  })\n\n  server.route({\n    method: `GET`,\n    path: `/{path*}`,\n    handler: {\n      directory: {\n        path: `${directory}/public`,\n        listing: false,\n        index: true,\n      },\n    },\n  })\n\n  server.start(e => {\n    if (e) {\n      if (e.code === `EADDRINUSE`) {\n        // eslint-disable-next-line max-len\n        console.log(\n          `Unable to start Gatsby on port ${serverPort} as there's already a process listing on that port.`\n        )\n      } else {\n        console.log(e)\n      }\n\n      process.exit()\n    } else {\n      if (program.open) {\n        opn(server.info.uri)\n      }\n      console.log(`Listening at:`, server.info.uri)\n    }\n  })\n}\n\nmodule.exports = program => {\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  detect(port, (err, _port) => {\n    if (err) {\n      console.error(err)\n      process.exit()\n    }\n\n    if (port !== _port) {\n      // eslint-disable-next-line max-len\n      const question = `Something is already running at port ${port} \\nWould you like to run the app at another port instead? [Y/n] `\n\n      return rlInterface.question(question, answer => {\n        if (answer.length === 0 || answer.match(/^yes|y$/i)) {\n          program.port = _port\n        }\n\n        return startServer(program, program.port)\n      })\n    }\n\n    return startServer(program)\n  })\n}\n"]}