{"version":3,"sources":["../../src/utils/source-nodes.js"],"names":["_","require","apiRunner","store","getNode","boundActionCreators","deleteNodes","module","exports","traceId","waitForCascadingActions","state","getState","touchedNodes","Object","keys","nodesTouched","staleNodes","values","nodes","filter","rootNode","node","whileCount","parent","undefined","console","log","includes","id","length","map","n"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,IAAIC,QAAS,QAAT,CAAV;;AAEA,IAAMC,YAAYD,QAAS,mBAAT,CAAlB;;eAC2BA,QAAS,UAAT,C;IAAnBE,K,YAAAA,K;IAAOC,O,YAAAA,O;;gBACiBH,QAAS,kBAAT,C;IAAxBI,mB,aAAAA,mB;;IACAC,W,GAAgBD,mB,CAAhBC,W;;;AAERC,OAAOC,OAAP,4EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACTN,UAAW,aAAX,EAAyB;AAC7BO,qBAAU,qBADmB;AAE7BC,qCAAyB;AAFI,WAAzB,CADS;;AAAA;AAMTC,eANS,GAMDR,MAAMS,QAAN,EANC;;AAQf;;AACMC,sBATS,GASMC,OAAOC,IAAP,CAAYJ,MAAMK,YAAlB,CATN;AAUTC,oBAVS,GAUIjB,EAAEkB,MAAF,CAASP,MAAMQ,KAAf,EAAsBC,MAAtB,CAA6B,gBAAQ;AACtD;AACA,gBAAIC,WAAWC,IAAf;AACA,gBAAIC,aAAa,CAAjB;AACA,mBACEF,SAASG,MAAT,IACApB,QAAQiB,SAASG,MAAjB,MAA6BC,SAD7B,IAEAF,aAAa,GAHf,EAIE;AACAF,yBAAWjB,QAAQiB,SAASG,MAAjB,CAAX;AACAD,4BAAc,CAAd;AACA,kBAAIA,aAAa,GAAjB,EAAsB;AACpBG,wBAAQC,GAAR,CACG,+DADH,EAEEN,QAFF;AAID;AACF;;AAED,mBAAO,CAACrB,EAAE4B,QAAF,CAAWf,YAAX,EAAyBQ,SAASQ,EAAlC,CAAR;AACD,WApBkB,CAVJ;;;AAgCf,cAAIZ,WAAWa,MAAX,GAAoB,CAAxB,EAA2B;AACzBxB,wBAAYW,WAAWc,GAAX,CAAe;AAAA,qBAAKC,EAAEH,EAAP;AAAA,aAAf,CAAZ;AACD;;AAlCc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","file":"source-nodes.js","sourcesContent":["const _ = require(`lodash`)\n\nconst apiRunner = require(`./api-runner-node`)\nconst { store, getNode } = require(`../redux`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst { deleteNodes } = boundActionCreators\n\nmodule.exports = async () => {\n  await apiRunner(`sourceNodes`, {\n    traceId: `initial-sourceNodes`,\n    waitForCascadingActions: true,\n  })\n\n  const state = store.getState()\n\n  // Garbage collect stale data nodes\n  const touchedNodes = Object.keys(state.nodesTouched)\n  const staleNodes = _.values(state.nodes).filter(node => {\n    // Find the root node.\n    let rootNode = node\n    let whileCount = 0\n    while (\n      rootNode.parent &&\n      getNode(rootNode.parent) !== undefined &&\n      whileCount < 101\n    ) {\n      rootNode = getNode(rootNode.parent)\n      whileCount += 1\n      if (whileCount > 100) {\n        console.log(\n          `It looks like you have a node that's set its parent as itself`,\n          rootNode\n        )\n      }\n    }\n\n    return !_.includes(touchedNodes, rootNode.id)\n  })\n\n  if (staleNodes.length > 0) {\n    deleteNodes(staleNodes.map(n => n.id))\n  }\n}\n"]}