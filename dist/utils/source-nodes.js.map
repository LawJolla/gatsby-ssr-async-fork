{"version":3,"sources":["../../src/utils/source-nodes.js"],"names":["_","require","apiRunner","store","getNode","boundActionCreators","deleteNodes","module","exports","traceId","waitForCascadingActions","state","getState","touchedNodes","Object","keys","nodesTouched","staleNodes","values","nodes","filter","node","rootNode","whileCount","parent","undefined","console","log","includes","id","length","map","n"],"mappings":";;AAAA,MAAMA,IAAIC,QAAS,QAAT,CAAV;;AAEA,MAAMC,YAAYD,QAAS,mBAAT,CAAlB;AACA,MAAM,EAAEE,KAAF,EAASC,OAAT,KAAqBH,QAAS,UAAT,CAA3B;AACA,MAAM,EAAEI,mBAAF,KAA0BJ,QAAS,kBAAT,CAAhC;AACA,MAAM,EAAEK,WAAF,KAAkBD,mBAAxB;;AAEAE,OAAOC,OAAP,GAAiB,YAAY;AAC3B,QAAMN,UAAW,aAAX,EAAyB;AAC7BO,aAAU,qBADmB;AAE7BC,6BAAyB;AAFI,GAAzB,CAAN;;AAKA,QAAMC,QAAQR,MAAMS,QAAN,EAAd;;AAEA;AACA,QAAMC,eAAeC,OAAOC,IAAP,CAAYJ,MAAMK,YAAlB,CAArB;AACA,QAAMC,aAAajB,EAAEkB,MAAF,CAASP,MAAMQ,KAAf,EAAsBC,MAAtB,CAA6BC,QAAQ;AACtD;AACA,QAAIC,WAAWD,IAAf;AACA,QAAIE,aAAa,CAAjB;AACA,WACED,SAASE,MAAT,IACApB,QAAQkB,SAASE,MAAjB,MAA6BC,SAD7B,IAEAF,aAAa,GAHf,EAIE;AACAD,iBAAWlB,QAAQkB,SAASE,MAAjB,CAAX;AACAD,oBAAc,CAAd;AACA,UAAIA,aAAa,GAAjB,EAAsB;AACpBG,gBAAQC,GAAR,CACG,+DADH,EAEEL,QAFF;AAID;AACF;;AAED,WAAO,CAACtB,EAAE4B,QAAF,CAAWf,YAAX,EAAyBS,SAASO,EAAlC,CAAR;AACD,GApBkB,CAAnB;;AAsBA,MAAIZ,WAAWa,MAAX,GAAoB,CAAxB,EAA2B;AACzBxB,gBAAYW,WAAWc,GAAX,CAAeC,KAAKA,EAAEH,EAAtB,CAAZ;AACD;AACF,CAnCD","file":"source-nodes.js","sourcesContent":["const _ = require(`lodash`)\n\nconst apiRunner = require(`./api-runner-node`)\nconst { store, getNode } = require(`../redux`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst { deleteNodes } = boundActionCreators\n\nmodule.exports = async () => {\n  await apiRunner(`sourceNodes`, {\n    traceId: `initial-sourceNodes`,\n    waitForCascadingActions: true,\n  })\n\n  const state = store.getState()\n\n  // Garbage collect stale data nodes\n  const touchedNodes = Object.keys(state.nodesTouched)\n  const staleNodes = _.values(state.nodes).filter(node => {\n    // Find the root node.\n    let rootNode = node\n    let whileCount = 0\n    while (\n      rootNode.parent &&\n      getNode(rootNode.parent) !== undefined &&\n      whileCount < 101\n    ) {\n      rootNode = getNode(rootNode.parent)\n      whileCount += 1\n      if (whileCount > 100) {\n        console.log(\n          `It looks like you have a node that's set its parent as itself`,\n          rootNode\n        )\n      }\n    }\n\n    return !_.includes(touchedNodes, rootNode.id)\n  })\n\n  if (staleNodes.length > 0) {\n    deleteNodes(staleNodes.map(n => n.id))\n  }\n}\n"]}