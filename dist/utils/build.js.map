{"version":3,"sources":["../../src/utils/build.js"],"names":["buildCSS","require","buildHTML","buildProductionBundle","bootstrap","report","apiRunnerNode","copyStaticDirectory","reportFailure","msg","err","log","panic","html","program","graphqlRunner","graphql","activity","activityTimer","start","catch","end","stripIndent","module","exports"],"mappings":";;AAEA,MAAMA,WAAWC,QAAS,aAAT,CAAjB;AACA,MAAMC,YAAYD,QAAS,cAAT,CAAlB;AACA,MAAME,wBAAwBF,QAAS,oBAAT,CAA9B;AACA,MAAMG,YAAYH,QAAS,cAAT,CAAlB;AACA,MAAMI,SAASJ,QAAS,aAAT,CAAf;AACA,MAAMK,gBAAgBL,QAAS,mBAAT,CAAtB;AACA,MAAMM,sBAAsBN,QAAS,yBAAT,CAA5B;;AAEA,SAASO,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAwC;AACtCL,SAAOM,GAAP,CAAY,EAAZ;AACAN,SAAOO,KAAP,CAAaH,GAAb,EAAkBC,GAAlB;AACD;;AAED,eAAeG,IAAf,CAAoBC,OAApB,EAAkC;AAChC,QAAM,EAAEC,aAAF,KAAoB,MAAMX,UAAUU,OAAV,CAAhC;;AAEA,QAAMR,cAAe,YAAf,EAA4B,EAAEU,SAASD,aAAX,EAA5B,CAAN;;AAEA;AACA;AACAR;;AAEA,MAAIU,WAAWZ,OAAOa,aAAP,CAAsB,cAAtB,CAAf;AACAD,WAASE,KAAT;AACA,QAAMnB,SAASc,OAAT,EAAkBM,KAAlB,CAAwBV,OAAO;AACnCF,kBAAe,uBAAf,EAAuCE,GAAvC;AACD,GAFK,CAAN;AAGAO,WAASI,GAAT;;AAEAJ,aAAWZ,OAAOa,aAAP,CAAsB,wCAAtB,CAAX;AACAD,WAASE,KAAT;AACA,QAAMhB,sBAAsBW,OAAtB,EAA+BM,KAA/B,CAAqCV,OAAO;AAChDF,kBAAe,sCAAf,EAAsDE,GAAtD;AACD,GAFK,CAAN;AAGAO,WAASI,GAAT;;AAEAJ,aAAWZ,OAAOa,aAAP,CAAsB,gCAAtB,CAAX;AACAD,WAASE,KAAT;AACA,QAAMjB,UAAUY,OAAV,EAAmBM,KAAnB,CAAyBV,OAAO;AACpCF,kBACEH,OAAOiB,WAAY;;;;OADrB,EAMEZ,GANF;AAQD,GATK,CAAN;AAUAO,WAASI,GAAT;;AAEA,QAAMf,cAAe,aAAf,EAA6B,EAAEU,SAASD,aAAX,EAA7B,CAAN;AACD;;AAEDQ,OAAOC,OAAP,GAAiBX,IAAjB","file":"build.js","sourcesContent":["/* @flow */\n\nconst buildCSS = require(`./build-css`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst report = require(`../reporter`)\nconst apiRunnerNode = require(`./api-runner-node`)\nconst copyStaticDirectory = require(`./copy-static-directory`)\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\nasync function html(program: any) {\n  const { graphqlRunner } = await bootstrap(program)\n\n  await apiRunnerNode(`onPreBuild`, { graphql: graphqlRunner })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirectory()\n\n  let activity = report.activityTimer(`Building CSS`)\n  activity.start()\n  await buildCSS(program).catch(err => {\n    reportFailure(`Generating CSS failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building production JavaScript bundles`)\n  activity.start()\n  await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building static HTML for pages`)\n  activity.start()\n  await buildHTML(program).catch(err => {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML for pages failed\n\n        See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n      `,\n      err\n    )\n  })\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, { graphql: graphqlRunner })\n}\n\nmodule.exports = html\n"]}