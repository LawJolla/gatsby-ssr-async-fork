{"version":3,"sources":["../../src/utils/build.js"],"names":["program","bootstrap","graphqlRunner","copyStaticDirectory","activity","report","activityTimer","start","buildCSS","catch","reportFailure","err","end","buildProductionBundle","buildHTML","stripIndent","apiRunnerNode","graphql","html","require","msg","log","panic","module","exports"],"mappings":";;;;;;;;;;;sFAeA,iBAAoBA,OAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkCC,UAAUD,OAAV,CADlC;;AAAA;AAAA;AACUE,yBADV,SACUA,aADV;;AAEE;AACA;AACAC;;AAEIC,oBANN,GAMiBC,OAAOC,aAAP,CAAsB,cAAtB,CANjB;;AAOEF,qBAASG,KAAT;AAPF;AAAA,mBAQQC,SAASR,OAAT,EAAkBS,KAAlB,CAAwB,eAAO;AACnCC,4BAAe,uBAAf,EAAuCC,GAAvC;AACD,aAFK,CARR;;AAAA;AAWEP,qBAASQ,GAAT;;AAEAR,uBAAWC,OAAOC,aAAP,CAAsB,wCAAtB,CAAX;AACAF,qBAASG,KAAT;AAdF;AAAA,mBAeQM,sBAAsBb,OAAtB,EAA+BS,KAA/B,CAAqC,eAAO;AAChDC,4BAAe,sCAAf,EAAsDC,GAAtD;AACD,aAFK,CAfR;;AAAA;AAkBEP,qBAASQ,GAAT;;AAEAR,uBAAWC,OAAOC,aAAP,CAAsB,gCAAtB,CAAX;AACAF,qBAASG,KAAT;AArBF;AAAA,mBAsBQO,UAAUd,OAAV,EAAmBS,KAAnB,CAAyB,eAAO;AACpCC,4BACEL,OAAOU,WAAY;;;;OADrB,EAMEJ,GANF;AAQD,aATK,CAtBR;;AAAA;AAgCEP,qBAASQ,GAAT;;AAhCF;AAAA,mBAkCQI,cAAe,aAAf,EAA6B,EAAEC,SAASf,aAAX,EAA7B,CAlCR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAegB,I;;;;;;;AAbf,IAAMV,WAAWW,QAAS,aAAT,CAAjB;AACA,IAAML,YAAYK,QAAS,cAAT,CAAlB;AACA,IAAMN,wBAAwBM,QAAS,oBAAT,CAA9B;AACA,IAAMlB,YAAYkB,QAAS,cAAT,CAAlB;AACA,IAAMd,SAASc,QAAS,aAAT,CAAf;AACA,IAAMH,gBAAgBG,QAAS,mBAAT,CAAtB;AACA,IAAMhB,sBAAsBgB,QAAS,yBAAT,CAA5B;;AAEA,SAAST,aAAT,CAAuBU,GAAvB,EAA4BT,GAA5B,EAAwC;AACtCN,SAAOgB,GAAP,CAAY,EAAZ;AACAhB,SAAOiB,KAAP,CAAaF,GAAb,EAAkBT,GAAlB;AACD;;AAuCDY,OAAOC,OAAP,GAAiBN,IAAjB","file":"build.js","sourcesContent":["/* @flow */\n\nconst buildCSS = require(`./build-css`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst report = require(`../reporter`)\nconst apiRunnerNode = require(`./api-runner-node`)\nconst copyStaticDirectory = require(`./copy-static-directory`)\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\nasync function html(program: any) {\n  const { graphqlRunner } = await bootstrap(program)\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirectory()\n\n  let activity = report.activityTimer(`Building CSS`)\n  activity.start()\n  await buildCSS(program).catch(err => {\n    reportFailure(`Generating CSS failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building production JavaScript bundles`)\n  activity.start()\n  await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building static HTML for pages`)\n  activity.start()\n  await buildHTML(program).catch(err => {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML for pages failed\n\n        See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n      `,\n      err\n    )\n  })\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, { graphql: graphqlRunner })\n}\n\nmodule.exports = html\n"]}