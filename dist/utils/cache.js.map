{"version":3,"sources":["../../src/utils/cache.js"],"names":["Promise","require","low","fs","_","db","directory","exports","initCache","ensureDirSync","process","cwd","env","NODE_ENV","tmpdir","format","serialize","obj","JSON","stringify","deserialize","str","parse","mixin","previousState","readFileSync","e","defaults","write","keys","get","key","resolve","reject","pair","getById","value","set","upsert","id","save","debounce","writeFile","getState","noop"],"mappings":";;AAAA,MAAMA,UAAUC,QAAS,UAAT,CAAhB;AACA,MAAMC,MAAMD,QAAS,OAAT,CAAZ;AACA,MAAME,KAAKF,QAAS,UAAT,CAAX;AACA,MAAMG,IAAIH,QAAS,QAAT,CAAV;;AAEA,IAAII,EAAJ;AACA,IAAIC,SAAJ;AACAC,QAAQC,SAAR,GAAoB,MAAM;AACxBL,KAAGM,aAAH,CAAkB,GAAEC,QAAQC,GAAR,EAAc,eAAlC;AACA,MAAID,QAAQE,GAAR,CAAYC,QAAZ,KAA0B,MAA9B,EAAqC;AACnCP,gBAAYL,QAAS,IAAT,EAAca,MAAd,EAAZ;AACD,GAFD,MAEO;AACLR,gBAAYI,QAAQC,GAAR,KAAiB,eAA7B;AACD;AACDN,OAAKH,IAAI,IAAJ,EAAU;AACba,YAAQ;AACNC,iBAAWC,OAAOC,KAAKC,SAAL,CAAeF,GAAf,CADZ;AAENG,mBAAaC,OAAOH,KAAKI,KAAL,CAAWD,GAAX;AAFd;AADK,GAAV,CAAL;AAMAhB,KAAGD,CAAH,CAAKmB,KAAL,CAAWtB,QAAS,WAAT,CAAX;;AAEA,MAAIuB,aAAJ;AACA,MAAI;AACFA,oBAAgBN,KAAKI,KAAL,CAAWnB,GAAGsB,YAAH,CAAiB,GAAEnB,SAAU,UAA7B,CAAX,CAAhB;AACD,GAFD,CAEE,OAAOoB,CAAP,EAAU;AACV;AACD;;AAED,MAAIF,aAAJ,EAAmB;AACjBnB,OAAGsB,QAAH,CAAYH,aAAZ,EAA2BI,KAA3B;AACD,GAFD,MAEO;AACLvB,OAAGsB,QAAH,CAAY,EAAEE,MAAM,EAAR,EAAZ,EAA0BD,KAA1B;AACD;AACF,CA3BD;;AA6BArB,QAAQuB,GAAR,GAAcC,OACZ,IAAI/B,OAAJ,CAAY,CAACgC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAIC,IAAJ;AACA,MAAI;AACFA,WAAO7B,GACJyB,GADI,CACC,MADD,EAEJK,OAFI,CAEIJ,GAFJ,EAGJK,KAHI,EAAP;AAID,GALD,CAKE,OAAOV,CAAP,EAAU;AACV;AACD;;AAED,MAAIQ,IAAJ,EAAU;AACRF,YAAQE,KAAKE,KAAb;AACD,GAFD,MAEO;AACLJ;AACD;AACF,CAhBD,CADF;;AAmBAzB,QAAQ8B,GAAR,GAAc,CAACN,GAAD,EAAMK,KAAN,KACZ,IAAIpC,OAAJ,CAAY,CAACgC,OAAD,EAAUC,MAAV,KAAqB;AAC/B5B,KACGyB,GADH,CACQ,MADR,EAEGQ,MAFH,CAEU,EAAEC,IAAIR,GAAN,EAAWK,KAAX,EAFV,EAGGR,KAHH;AAIAY;AACAR,UAAS,IAAT;AACD,CAPD,CADF;;AAUA,IAAIQ,IAAJ;;AAEA,IAAI9B,QAAQE,GAAR,CAAYC,QAAZ,KAA0B,MAA9B,EAAqC;AACnC2B,SAAOpC,EAAEqC,QAAF,CAAW,MAAM;AACtBtC,OAAGuC,SAAH,CAAc,GAAEpC,SAAU,UAA1B,EAAqCY,KAAKC,SAAL,CAAed,GAAGsC,QAAH,EAAf,CAArC;AACD,GAFM,EAEJ,GAFI,CAAP;AAGD,CAJD,MAIO;AACLH,SAAOpC,EAAEwC,IAAT;AACD","file":"cache.js","sourcesContent":["const Promise = require(`bluebird`)\nconst low = require(`lowdb`)\nconst fs = require(`fs-extra`)\nconst _ = require(`lodash`)\n\nlet db\nlet directory\nexports.initCache = () => {\n  fs.ensureDirSync(`${process.cwd()}/.cache/cache`)\n  if (process.env.NODE_ENV === `test`) {\n    directory = require(`os`).tmpdir()\n  } else {\n    directory = process.cwd() + `/.cache/cache`\n  }\n  db = low(null, {\n    format: {\n      serialize: obj => JSON.stringify(obj),\n      deserialize: str => JSON.parse(str),\n    },\n  })\n  db._.mixin(require(`lodash-id`))\n\n  let previousState\n  try {\n    previousState = JSON.parse(fs.readFileSync(`${directory}/db.json`))\n  } catch (e) {\n    // ignore\n  }\n\n  if (previousState) {\n    db.defaults(previousState).write()\n  } else {\n    db.defaults({ keys: [] }).write()\n  }\n}\n\nexports.get = key =>\n  new Promise((resolve, reject) => {\n    let pair\n    try {\n      pair = db\n        .get(`keys`)\n        .getById(key)\n        .value()\n    } catch (e) {\n      // ignore\n    }\n\n    if (pair) {\n      resolve(pair.value)\n    } else {\n      resolve()\n    }\n  })\n\nexports.set = (key, value) =>\n  new Promise((resolve, reject) => {\n    db\n      .get(`keys`)\n      .upsert({ id: key, value })\n      .write()\n    save()\n    resolve(`Ok`)\n  })\n\nlet save\n\nif (process.env.NODE_ENV !== `test`) {\n  save = _.debounce(() => {\n    fs.writeFile(`${directory}/db.json`, JSON.stringify(db.getState()))\n  }, 250)\n} else {\n  save = _.noop\n}\n"]}