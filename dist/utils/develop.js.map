{"version":3,"sources":["../../src/utils/develop.js"],"names":["express","require","graphqlHTTP","request","bootstrap","chokidar","webpack","webpackConfig","rl","parsePath","store","copyStaticDirectory","developHtml","withBasePath","report","setTimeout","rlInterface","createInterface","input","process","stdin","output","stdout","on","exit","startServer","program","directory","directoryPath","createIndexHtml","catch","err","name","panic","stripIndent","compilerConfig","port","devConfig","resolve","compiler","app","use","log","path","heartbeat","schema","getState","graphiql","static","__dirname","noInfo","quiet","publicPath","proxy","config","prefix","url","req","res","proxiedUrl","originalUrl","pipe","get","next","sendFile","parsedPath","extname","startsWith","status","end","server","Server","io","socket","join","listener","listen","host","code","open","address","watchGlobs","map","watch","to","emit","module","exports","detect","parseInt","_port","question","answer","length","match"],"mappings":"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","file":"develop.js","sourcesContent":["/* @flow */\n\nconst express = require(`express`)\nconst graphqlHTTP = require(`express-graphql`)\nconst request = require(`request`)\nconst bootstrap = require(`../bootstrap`)\nconst chokidar = require(`chokidar`)\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`./webpack.config`)\nconst rl = require(`readline`)\nconst parsePath = require(`parse-filepath`)\nconst { store } = require(`../redux`)\nconst copyStaticDirectory = require(`./copy-static-directory`)\nconst developHtml = require(`./develop-html`)\nconst { withBasePath } = require(`./path`)\nconst report = require(`../reporter`)\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfer with the regular\n// bootstrap.\nsetTimeout(() => {\n  copyStaticDirectory()\n}, 10000)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nasync function startServer(program) {\n  const directory = program.directory\n  const directoryPath = withBasePath(directory)\n  const createIndexHtml = () =>\n    developHtml(program).catch(err => {\n      if (err.name !== `WebpackError`) {\n        report.panic(err)\n        return\n      }\n      report.panic(\n        report.stripIndent`\n          There was an error compiling the html.js component for the development server.\n\n          See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n        `,\n        err\n      )\n    })\n\n  // Start bootstrap process.\n  await bootstrap(program)\n\n  await createIndexHtml()\n\n  const compilerConfig = await webpackConfig(\n    program,\n    directory,\n    `develop`,\n    program.port\n  )\n\n  const devConfig = compilerConfig.resolve()\n  const compiler = webpack(devConfig)\n\n  /**\n   * Set up the express app.\n   **/\n  const app = express()\n  app.use(\n    require(`webpack-hot-middleware`)(compiler, {\n      log: () => {},\n      path: `/__webpack_hmr`,\n      heartbeat: 10 * 1000,\n    })\n  )\n  app.use(\n    `/___graphql`,\n    graphqlHTTP({\n      schema: store.getState().schema,\n      graphiql: true,\n    })\n  )\n\n  app.use(express.static(__dirname + `/public`))\n\n  app.use(\n    require(`webpack-dev-middleware`)(compiler, {\n      noInfo: true,\n      quiet: true,\n      publicPath: devConfig.output.publicPath,\n    })\n  )\n\n  // Set up API proxy.\n  const { proxy } = store.getState().config\n  if (proxy) {\n    const { prefix, url } = proxy\n    app.use(`${prefix}/*`, (req, res) => {\n      const proxiedUrl = url + req.originalUrl\n      req.pipe(request(proxiedUrl)).pipe(res)\n    })\n  }\n\n  // Check if the file exists in the public folder.\n  app.get(`*`, (req, res, next) => {\n    // Load file but ignore errors.\n    res.sendFile(directoryPath(`/public/${req.url}`), err => {\n      // No err so a file was sent successfully.\n      if (!err || !err.path) {\n        next()\n      } else if (err) {\n        // There was an error. Let's check if the error was because it\n        // couldn't find an HTML file. We ignore these as we want to serve\n        // all HTML from our single empty SSR html file.\n        const parsedPath = parsePath(err.path)\n        if (\n          parsedPath.extname === `` ||\n          parsedPath.extname.startsWith(`.html`)\n        ) {\n          next()\n        } else {\n          res.status(404).end()\n        }\n      }\n    })\n  })\n\n  // Render an HTML page and serve it.\n  app.use((req, res, next) => {\n    const parsedPath = parsePath(req.originalUrl)\n    if (parsedPath.extname === `` || parsedPath.extname.startsWith(`.html`)) {\n      res.sendFile(directoryPath(`public/index.html`), err => {\n        if (err) {\n          res.status(500).end()\n        }\n      })\n    } else {\n      next()\n    }\n  })\n\n  /**\n   * Set up the HTTP server and socket.io.\n   **/\n\n  const server = require(`http`).Server(app)\n  const io = require(`socket.io`)(server)\n\n  io.on(`connection`, socket => {\n    socket.join(`clients`)\n  })\n\n  const listener = server.listen(program.port, program.host, err => {\n    if (err) {\n      if (err.code === `EADDRINUSE`) {\n        // eslint-disable-next-line max-len\n        report.panic(\n          `Unable to start Gatsby on port ${program.port} as there's already a process listing on that port.`\n        )\n        return\n      }\n\n      report.panic(`There was a problem starting the development server`, err)\n    }\n\n    if (program.open) {\n      const host =\n        listener.address().address === `127.0.0.1`\n          ? `localhost`\n          : listener.address().address\n      require(`opn`)(`http://${host}:${listener.address().port}`)\n    }\n  })\n\n  // Register watcher that rebuilds index.html every time html.js changes.\n  const watchGlobs = [`src/html.js`, `plugins/**/gatsby-ssr.js`].map(path =>\n    directoryPath(path)\n  )\n\n  chokidar.watch(watchGlobs).on(`change`, async () => {\n    await createIndexHtml()\n    io.to(`clients`).emit(`reload`)\n  })\n}\n\nmodule.exports = (program: any) => {\n  const detect = require(`detect-port`)\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  detect(port, (err, _port) => {\n    if (err) {\n      report.panic(err)\n    }\n\n    if (port !== _port) {\n      // eslint-disable-next-line max-len\n      const question = `Something is already running at port ${port} \\nWould you like to run the app at another port instead? [Y/n] `\n\n      return rlInterface.question(question, answer => {\n        if (answer.length === 0 || answer.match(/^yes|y$/i)) {\n          program.port = _port // eslint-disable-line no-param-reassign\n        }\n\n        return startServer(program)\n      })\n    }\n\n    return startServer(program)\n  })\n}\n"]}