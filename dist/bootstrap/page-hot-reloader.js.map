{"version":3,"sources":["../../src/bootstrap/page-hot-reloader.js"],"names":["_","require","emitter","store","apiRunnerNode","boundActionCreators","deletePage","deleteComponentsDependencies","pagesDirty","graphql","on","action","payload","internal","type","debouncedCreatePages","runCreatePages","plugins","getState","statefulPlugins","filter","p","gatsbyNode","resolve","createPagesStatefully","e","map","id","timestamp","Date","toJSON","traceId","waitForCascadingActions","pages","includes","pluginCreatorId","updatedAt","forEach","page","path","debounce","module","exports","graphqlRunner"],"mappings":";;AAAA,MAAMA,IAAIC,QAAS,QAAT,CAAV;;AAEA,MAAM,EAAEC,OAAF,EAAWC,KAAX,KAAqBF,QAAS,UAAT,CAA3B;AACA,MAAMG,gBAAgBH,QAAS,0BAAT,CAAtB;AACA,MAAM,EAAEI,mBAAF,KAA0BJ,QAAS,kBAAT,CAAhC;AACA,MAAM,EAAEK,UAAF,EAAcC,4BAAd,KAA+CF,mBAArD;;AAEA,IAAIG,aAAa,KAAjB;AACA,IAAIC,OAAJ;;AAEAP,QAAQQ,EAAR,CAAY,aAAZ,EAA0BC,UAAU;AAClC,MAAIA,OAAOC,OAAP,CAAeC,QAAf,CAAwBC,IAAxB,KAAkC,UAAtC,EAAiD;AAC/CN,iBAAa,IAAb;AACD;AACF,CAJD;AAKAN,QAAQQ,EAAR,CAAY,aAAZ,EAA0BC,UAAU;AAClCH,eAAa,IAAb;AACAO;AACD,CAHD;;AAKAb,QAAQQ,EAAR,CAAY,yBAAZ,EAAsC,MAAM;AAC1C,MAAIF,UAAJ,EAAgB;AACdO;AACD;AACF,CAJD;;AAMA,MAAMC,iBAAiB,YAAY;AACjCR,eAAa,KAAb;AACA,QAAMS,UAAUd,MAAMe,QAAN,GAAiBD,OAAjC;AACA;AACA;AACA,QAAME,kBAAkBF,QACrBG,MADqB,CACdC,KAAK;AACX,QAAI;AACF,YAAMC,aAAarB,QAAS,GAAEoB,EAAEE,OAAQ,cAArB,CAAnB;AACA,UAAID,WAAWE,qBAAf,EAAsC;AACpC,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF,KAPD,CAOE,OAAOC,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF,GAZqB,EAarBC,GAbqB,CAajBL,KAAKA,EAAEM,EAbU,CAAxB;;AAeA,QAAMC,YAAY,IAAIC,IAAJ,GAAWC,MAAX,EAAlB;;AAEA,QAAM1B,cAAe,aAAf,EAA6B;AACjCK,WADiC;AAEjCsB,aAAU,aAFuB;AAGjCC,6BAAyB;AAHQ,GAA7B,CAAN;;AAMA;AACA7B,QACGe,QADH,GAEGe,KAFH,CAESb,MAFT,CAEgBC,KAAK,CAACrB,EAAEkC,QAAF,CAAWf,eAAX,EAA4BE,EAAEc,eAA9B,CAFtB,EAGGf,MAHH,CAGUC,KAAKA,EAAEe,SAAF,GAAcR,SAH7B,EAIGS,OAJH,CAIWC,QAAQ;AACf/B,iCAA6B,CAAC+B,KAAKC,IAAN,CAA7B;AACAjC,eAAWgC,IAAX;AACD,GAPH;AAQD,CArCD;;AAuCA,MAAMvB,uBAAuBf,EAAEwC,QAAF,CAAWxB,cAAX,EAA2B,GAA3B,CAA7B;;AAEAyB,OAAOC,OAAP,GAAiBC,iBAAiB;AAChClC,YAAUkC,aAAV;AACD,CAFD","file":"page-hot-reloader.js","sourcesContent":["const _ = require(`lodash`)\n\nconst { emitter, store } = require(`../redux`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst { deletePage, deleteComponentsDependencies } = boundActionCreators\n\nlet pagesDirty = false\nlet graphql\n\nemitter.on(`CREATE_NODE`, action => {\n  if (action.payload.internal.type !== `SitePage`) {\n    pagesDirty = true\n  }\n})\nemitter.on(`DELETE_NODE`, action => {\n  pagesDirty = true\n  debouncedCreatePages()\n})\n\nemitter.on(`API_RUNNING_QUEUE_EMPTY`, () => {\n  if (pagesDirty) {\n    debouncedCreatePages()\n  }\n})\n\nconst runCreatePages = async () => {\n  pagesDirty = false\n  const plugins = store.getState().plugins\n  // Test which plugins implement createPagesStatefully so we can\n  // ignore their pages.\n  const statefulPlugins = plugins\n    .filter(p => {\n      try {\n        const gatsbyNode = require(`${p.resolve}/gatsby-node`)\n        if (gatsbyNode.createPagesStatefully) {\n          return true\n        } else {\n          return false\n        }\n      } catch (e) {\n        return false\n      }\n    })\n    .map(p => p.id)\n\n  const timestamp = new Date().toJSON()\n\n  await apiRunnerNode(`createPages`, {\n    graphql,\n    traceId: `createPages`,\n    waitForCascadingActions: true,\n  })\n\n  // Delete pages that weren't updated when running createPages.\n  store\n    .getState()\n    .pages.filter(p => !_.includes(statefulPlugins, p.pluginCreatorId))\n    .filter(p => p.updatedAt < timestamp)\n    .forEach(page => {\n      deleteComponentsDependencies([page.path])\n      deletePage(page)\n    })\n}\n\nconst debouncedCreatePages = _.debounce(runCreatePages, 100)\n\nmodule.exports = graphqlRunner => {\n  graphql = graphqlRunner\n}\n"]}