{"version":3,"sources":["../../src/bootstrap/index.js"],"names":["Promise","require","glob","_","slash","fs","md5File","crypto","del","apiRunnerNode","testRequireError","graphql","store","emitter","loadPlugins","initCache","report","extractQueries","runQueries","writePages","preferDefault","m","default","module","exports","program","directory","dispatch","type","payload","activity","activityTimer","start","end","config","err","error","process","exit","flattenedPlugins","pluginVersions","map","p","version","all","resolve","catch","hashes","pluginsHash","createHash","update","JSON","stringify","concat","digest","state","getState","oldPluginsHash","status","PLUGINS_HASH","info","stripIndent","remove","ensureDirSync","srcDir","__dirname","siteDir","tryRequire","copy","clobber","panic","hasAPIFile","env","plugin","sync","ssrPlugins","filter","options","pluginOptions","browserPlugins","browserAPIRunner","readFileSync","browserPluginsRequires","join","sSRAPIRunner","ssrPluginsRequires","writeFileSync","extensions","traceId","apiResults","flattenDeep","graphqlRunner","query","context","schema","waitForCascadingActions","NODE_ENV","checkJobsDone","debounce","jobs","active","length","log","uptime","on"],"mappings":";;;;;;;;;;;;AACA,IAAMA,UAAUC,QAAS,UAAT,CAAhB;AACA,IAAMC,OAAOD,QAAS,MAAT,CAAb;AACA,IAAME,IAAIF,QAAS,QAAT,CAAV;AACA,IAAMG,QAAQH,QAAS,OAAT,CAAd;AACA,IAAMI,KAAKJ,QAAS,UAAT,CAAX;AACA,IAAMK,UAAUL,QAAS,kBAAT,CAAhB;AACA,IAAMM,SAASN,QAAS,QAAT,CAAf;AACA,IAAMO,MAAMP,QAAS,KAAT,CAAZ;;AAEA,IAAMQ,gBAAgBR,QAAS,0BAAT,CAAtB;AACA,IAAMS,mBAAmBT,QAAS,6BAAT,CAAzB;;eACoBA,QAAS,SAAT,C;IAAZU,O,YAAAA,O;;gBACmBV,QAAS,UAAT,C;IAAnBW,K,aAAAA,K;IAAOC,O,aAAAA,O;;AACf,IAAMC,cAAcb,QAAS,gBAAT,CAApB;;gBACsBA,QAAS,gBAAT,C;IAAdc,S,aAAAA,S;;AACR,IAAMC,SAASf,QAAS,aAAT,CAAf;;gBAIIA,QAAS,gDAAT,C;IADFgB,c,aAAAA,c;;gBAIEhB,QAAS,oDAAT,C;IADFiB,U,aAAAA,U;;gBAEqBjB,QAAS,+CAAT,C;IAAfkB,U,aAAAA,U;;AAER;AACA;AACA;AACA;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,SAAMC,KAAKA,EAAEC,OAAR,IAAoBD,CAAzB;AAAA,CAAtB;;AAEAE,OAAOC,OAAP;AAAA,sFAAiB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACf;AACAA,oBAAQC,SAAR,GAAoBtB,MAAMqB,QAAQC,SAAd,CAApB;;AAEAd,kBAAMe,QAAN,CAAe;AACbC,oBAAO,aADM;AAEbC,uBAASJ;AAFI,aAAf;;AAKA;AACA;AACIK,oBAXW,GAWAd,OAAOe,aAAP,CAAsB,wCAAtB,CAXA;;AAYfD,qBAASE,KAAT;AAZe;AAAA,mBAaTxB,IAAI,CAAE,eAAF,EAAmB,kBAAnB,CAAJ,CAbS;;AAAA;AAcfsB,qBAASG,GAAT;;AAEA;AACAH,uBAAWd,OAAOe,aAAP,CAAsB,oCAAtB,CAAX;AACAD,qBAASE,KAAT;AACIE,kBAnBW;;AAoBf,gBAAI;AACF;AACAA,uBAASd,cAAcnB,QAAS,GAAEwB,QAAQC,SAAU,gBAA7B,CAAd,CAAT;AACD,aAHD,CAGE,OAAOS,GAAP,EAAY;AACZ,kBAAI,CAACzB,iBAAkB,GAAEe,QAAQC,SAAU,gBAAtC,EAAuDS,GAAvD,CAAL,EAAkE;AAChEnB,uBAAOoB,KAAP,CAAc,8BAAd,EAA6CD,GAA7C;AACAE,wBAAQC,IAAR,CAAa,CAAb;AACD;AACF;;AAED1B,kBAAMe,QAAN,CAAe;AACbC,oBAAO,iBADM;AAEbC,uBAASK;AAFI,aAAf;;AAKAJ,qBAASG,GAAT;;AAnCe;AAAA,mBAqCgBnB,YAAYoB,MAAZ,CArChB;;AAAA;AAqCTK,4BArCS;;;AAuCf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMC,0BA/CS,GA+CQD,iBAAiBE,GAAjB,CAAqB;AAAA,qBAAKC,EAAEC,OAAP;AAAA,aAArB,CA/CR;AAAA;AAAA,mBAgDM3C,QAAQ4C,GAAR,CAAY,CAC/BtC,QAAS,cAAT,CAD+B,EAE/BN,QAAQ6C,OAAR,CACEvC,QAAS,GAAEmB,QAAQC,SAAU,mBAA7B,EAAiDoB,KAAjD,CAAuD,YAAM,CAAE,CAA/D,CADF,CAF+B,EAI5B;AACH9C,oBAAQ6C,OAAR,CACEvC,QAAS,GAAEmB,QAAQC,SAAU,iBAA7B,EAA+CoB,KAA/C,CAAqD,YAAM,CAAE,CAA7D,CADF,CAL+B,CAAZ,CAOhB;AAPgB,aAhDN;;AAAA;AAgDTC,kBAhDS;AAyDTC,uBAzDS,GAyDKzC,OACjB0C,UADiB,CACL,KADK,EAEjBC,MAFiB,CAEVC,KAAKC,SAAL,CAAeZ,eAAea,MAAf,CAAsBN,MAAtB,CAAf,CAFU,EAGjBO,MAHiB,CAGT,KAHS,CAzDL;AA6DXC,iBA7DW,GA6DH3C,MAAM4C,QAAN,EA7DG;AA8DTC,0BA9DS,GA8DQF,SAASA,MAAMG,MAAf,GAAwBH,MAAMG,MAAN,CAAaC,YAArC,GAAqD,EA9D7D;;AAgEf;AACA;AACA;AACA;AACA;;AACA,gBAAIF,kBAAkBT,gBAAgBS,cAAtC,EAAsD;AACpDzC,qBAAO4C,IAAP,CAAY5C,OAAO6C,WAAY;;;;KAA/B;AAKD;;AA3Ec,kBA6EX,CAACJ,cAAD,IAAmBT,gBAAgBS,cA7ExB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA+ELpD,GAAGyD,MAAH,CAAW,GAAErC,QAAQC,SAAU,SAA/B,CA/EK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAiFXV,mBAAOoB,KAAP,CAAc,gCAAd;;AAjFW;AAmFb;AACA;AACAxB,kBAAMe,QAAN,CAAe;AACbC,oBAAO;AADM,aAAf;;AArFa;;AA0Ff;AACAhB,kBAAMe,QAAN,CAAe;AACbC,oBAAO,qBADM;AAEbC,uBAASmB;AAFI,aAAf;;AAKA;AACA;AACAjC;;AAEA;AApGe;AAAA,mBAqGTV,GAAG0D,aAAH,CAAkB,GAAEtC,QAAQC,SAAU,gBAAtC,CArGS;;AAAA;;AAuGf;AACAI,uBAAWd,OAAOe,aAAP,CAAsB,mBAAtB,CAAX;AACAD,qBAASE,KAAT;AACMgC,kBA1GS,GA0GC,GAAEC,SAAU,kBA1Gb;AA2GTC,mBA3GS,GA2GE,GAAEzC,QAAQC,SAAU,SA3GtB;AA4GTyC,sBA5GS,GA4GK,GAAEF,SAAU,iCA5GjB;AAAA;AAAA;AAAA,mBA8GP5D,GAAG+D,IAAH,CAAQJ,MAAR,EAAgBE,OAAhB,EAAyB,EAAEG,SAAS,IAAX,EAAzB,CA9GO;;AAAA;AAAA;AAAA,mBA+GPhE,GAAG+D,IAAH,CAAQD,UAAR,EAAqB,GAAED,OAAQ,wBAA/B,EAAwD;AAC5DG,uBAAS;AADmD,aAAxD,CA/GO;;AAAA;AAAA;AAAA,mBAkHPhE,GAAG0D,aAAH,CAAkB,GAAEtC,QAAQC,SAAU,cAAtC,CAlHO;;AAAA;AAAA;AAAA,mBAmHPrB,GAAG0D,aAAH,CAAkB,GAAEtC,QAAQC,SAAU,iBAAtC,CAnHO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqHbV,mBAAOsD,KAAP,CAAc,qCAAd;;AArHa;;AAwHf;AACA;AACMC,sBA1HS,GA0HI,SAAbA,UAAa,CAACC,GAAD,EAAMC,MAAN;AAAA;AACjB;AACAvE,qBAAKwE,IAAL,CAAW,GAAED,OAAO5B,OAAQ,WAAU2B,GAAI,GAA1C,EAA8C,CAA9C;AAFiB;AAAA,aA1HJ;;AA8HTG,sBA9HS,GA8HIxE,EAAEyE,MAAF,CACjBrC,iBAAiBE,GAAjB,CAAqB,kBAAU;AAC7B,qBAAO;AACLI,yBAAS0B,WAAY,KAAZ,EAAkBE,MAAlB,CADJ;AAELI,yBAASJ,OAAOK;AAFX,eAAP;AAID,aALD,CADiB,EAOjB;AAAA,qBAAUL,OAAO5B,OAAjB;AAAA,aAPiB,CA9HJ;AAuITkC,0BAvIS,GAuIQ5E,EAAEyE,MAAF,CACrBrC,iBAAiBE,GAAjB,CAAqB,kBAAU;AAC7B,qBAAO;AACLI,yBAAS0B,WAAY,SAAZ,EAAsBE,MAAtB,CADJ;AAELI,yBAASJ,OAAOK;AAFX,eAAP;AAID,aALD,CADqB,EAOrB;AAAA,qBAAUL,OAAO5B,OAAjB;AAAA,aAPqB,CAvIR;AAiJXmC,4BAjJW,GAiJS,EAjJT;;;AAmJf,gBAAI;AACFA,iCAAmB3E,GAAG4E,YAAH,CAChB,GAAEf,OAAQ,wBADM,EAEhB,OAFgB,CAAnB;AAID,aALD,CAKE,OAAO/B,GAAP,EAAY;AACZnB,qBAAOsD,KAAP,CAAc,kBAAiBJ,OAAQ,wBAAvC,EAAgE/B,GAAhE;AACD;;AAEK+C,kCA5JS,GA4JgBH,eAC5BtC,GAD4B,CAE3B;AAAA,qBACG;yBACgBgC,OAAO5B,OAAQ;iBACvBM,KAAKC,SAAL,CAAeqB,OAAOI,OAAtB,CAA+B;MAH1C;AAAA,aAF2B,EAQ5BM,IAR4B,CAQtB,GARsB,CA5JhB;;;AAsKfH,+BAAoB,kBAAiBE,sBAAuB,MAAKF,gBAAiB,EAAlF;;AAEII,wBAxKW,GAwKK,EAxKL;;;AA0Kf,gBAAI;AACFA,6BAAe/E,GAAG4E,YAAH,CAAiB,GAAEf,OAAQ,oBAA3B,EAAiD,OAAjD,CAAf;AACD,aAFD,CAEE,OAAO/B,GAAP,EAAY;AACZnB,qBAAOsD,KAAP,CAAc,kBAAiBJ,OAAQ,oBAAvC,EAA4D/B,GAA5D;AACD;;AAEKkD,8BAhLS,GAgLYV,WACxBlC,GADwB,CAEvB;AAAA,qBACG;yBACgBgC,OAAO5B,OAAQ;iBACvBM,KAAKC,SAAL,CAAeqB,OAAOI,OAAtB,CAA+B;MAH1C;AAAA,aAFuB,EAQxBM,IARwB,CAQlB,GARkB,CAhLZ;;AAyLfC,2BAAgB,kBAAiBC,kBAAmB,MAAKD,YAAa,EAAtE;;AAEA/E,eAAGiF,aAAH,CACG,GAAEpB,OAAQ,wBADb,EAEEc,gBAFF,EAGG,OAHH;AAKA3E,eAAGiF,aAAH,CAAkB,GAAEpB,OAAQ,oBAA5B,EAAiDkB,YAAjD,EAAgE,OAAhE;;AAEAtD,qBAASG,GAAT;;AAEA;AACAH,uBAAWd,OAAOe,aAAP,CAAsB,4BAAtB,CAAX;AACAD,qBAASE,KAAT;AAtMe;AAAA,mBAuMT/B,QAAS,uBAAT,GAvMS;;AAAA;AAwMf6B,qBAASG,GAAT;;AAEA;AACAH,uBAAWd,OAAOe,aAAP,CAAsB,iBAAtB,CAAX;AACAD,qBAASE,KAAT;AA5Me;AAAA,mBA6MT/B,QAAS,WAAT,GA7MS;;AAAA;AA8Mf6B,qBAASG,GAAT;;AAEA;AACMsD,sBAjNS,GAiNI,CAAE,KAAF,EAAS,MAAT,CAjNJ;AAkNf;AACA;;AAnNe;AAAA,mBAoNU9E,cAAe,sBAAf,EAAsC;AAC7D+E,uBAAU;AADmD,aAAtC,CApNV;;AAAA;AAoNTC,sBApNS;;;AAwNf7E,kBAAMe,QAAN,CAAe;AACbC,oBAAO,wBADM;AAEbC,uBAAS1B,EAAEuF,WAAF,CAAc,CAACH,UAAD,EAAaE,UAAb,CAAd;AAFI,aAAf;;AAKME,yBA7NS,GA6NO,SAAhBA,aAAgB,CAACC,KAAD,EAAyB;AAAA,kBAAjBC,OAAiB,uEAAP,EAAO;;AAC7C,kBAAMC,SAASlF,MAAM4C,QAAN,GAAiBsC,MAAhC;AACA,qBAAOnF,QAAQmF,MAAR,EAAgBF,KAAhB,EAAuBC,OAAvB,EAAgCA,OAAhC,EAAyCA,OAAzC,CAAP;AACD,aAhOc;;AAkOf;;;AACA/D,uBAAWd,OAAOe,aAAP,CAAsB,eAAtB,CAAX;AACAD,qBAASE,KAAT;AApOe;AAAA,mBAqOTvB,cAAe,eAAf,EAA+B;AACnCE,uBAASgF,aAD0B;AAEnCH,uBAAU,uBAFyB;AAGnCO,uCAAyB;AAHU,aAA/B,CArOS;;AAAA;AA0OfjE,qBAASG,GAAT;;AAEA;AACAH,uBAAWd,OAAOe,aAAP,CAAsB,aAAtB,CAAX;AACAD,qBAASE,KAAT;AA9Oe;AAAA,mBA+OTvB,cAAe,aAAf,EAA6B;AACjCE,uBAASgF,aADwB;AAEjCH,uBAAU,qBAFuB;AAGjCO,uCAAyB;AAHQ,aAA7B,CA/OS;;AAAA;AAoPfjE,qBAASG,GAAT;;AAEA;AACA;AACA;AACA;AACAH,uBAAWd,OAAOe,aAAP,CAAsB,uBAAtB,CAAX;AACAD,qBAASE,KAAT;AA3Pe;AAAA,mBA4PTvB,cAAe,uBAAf,EAAuC;AAC3CE,uBAASgF,aADkC;AAE3CH,uBAAU,+BAFiC;AAG3CO,uCAAyB;AAHkB,aAAvC,CA5PS;;AAAA;AAiQfjE,qBAASG,GAAT;AACA;AACAH,uBAAWd,OAAOe,aAAP,CAAsB,iCAAtB,CAAX;AACAD,qBAASE,KAAT;AApQe;AAAA,mBAqQTf,gBArQS;;AAAA;AAsQfa,qBAASG,GAAT;;AAEA;AACA,gBAAII,QAAQmC,GAAR,CAAYwB,QAAZ,KAA0B,YAA9B,EAA2C;AACzC/F,sBAAS,qBAAT,EAA+B0F,aAA/B;AACD;;AAED;AACA7D,uBAAWd,OAAOe,aAAP,CAAsB,qBAAtB,CAAX;AACAD,qBAASE,KAAT;AA/Qe;AAAA,mBAgRTd,YAhRS;;AAAA;AAiRfY,qBAASG,GAAT;;AAEA;AACAH,uBAAWd,OAAOe,aAAP,CAAsB,qBAAtB,CAAX;AACAD,qBAASE,KAAT;AArRe;AAAA,mBAsRTb,YAtRS;;AAAA;AAuRfW,qBAASG,GAAT;;AAEA;AACAH,uBAAWd,OAAOe,aAAP,CAAsB,eAAtB,CAAX;AACAD,qBAASE,KAAT;AA3Re;AAAA,mBA4RT/B,QAAS,WAAT,GA5RS;;AAAA;AA6Rf6B,qBAASG,GAAT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEMgE,yBA7SS,GA6SO9F,EAAE+F,QAAF,CAAW,mBAAW;AAC1C,kBAAM3C,QAAQ3C,MAAM4C,QAAN,EAAd;AACA,kBAAID,MAAM4C,IAAN,CAAWC,MAAX,CAAkBC,MAAlB,KAA6B,CAAjC,EAAoC;AAClCrF,uBAAOsF,GAAP,CAAY,EAAZ;AACAtF,uBAAO4C,IAAP,CAAa,wBAAuBvB,QAAQkE,MAAR,EAAiB,IAArD;AACAvF,uBAAOsF,GAAP,CAAY,EAAZ;AACAzD,wBAAQ,EAAE8C,aAAF,EAAR;AACD;AACF,aARqB,EAQnB,GARmB,CA7SP;;AAAA,kBAuTX/E,MAAM4C,QAAN,GAAiB2C,IAAjB,CAAsBC,MAAtB,CAA6BC,MAA7B,KAAwC,CAvT7B;AAAA;AAAA;AAAA;;AAwTbrF,mBAAOsF,GAAP,CAAY,EAAZ;AACAtF,mBAAO4C,IAAP,CAAa,wBAAuBvB,QAAQkE,MAAR,EAAiB,IAArD;AACAvF,mBAAOsF,GAAP,CAAY,EAAZ;AA1Ta,6CA2TN,EAAEX,aAAF,EA3TM;;AAAA;AAAA,6CA6TN,IAAI3F,OAAJ,CAAY,mBAAW;AAC5B;AACAa,sBAAQ2F,EAAR,CAAY,SAAZ,EAAsB;AAAA,uBAAMP,cAAcpD,OAAd,CAAN;AAAA,eAAtB;AACD,aAHM,CA7TM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","file":"index.js","sourcesContent":["/* @flow */\nconst Promise = require(`bluebird`)\nconst glob = require(`glob`)\nconst _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs-extra`)\nconst md5File = require(`md5-file/promise`)\nconst crypto = require(`crypto`)\nconst del = require(`del`)\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst testRequireError = require(`../utils/test-require-error`)\nconst { graphql } = require(`graphql`)\nconst { store, emitter } = require(`../redux`)\nconst loadPlugins = require(`./load-plugins`)\nconst { initCache } = require(`../utils/cache`)\nconst report = require(`../reporter`)\n\nconst {\n  extractQueries,\n} = require(`../internal-plugins/query-runner/query-watcher`)\nconst {\n  runQueries,\n} = require(`../internal-plugins/query-runner/page-query-runner`)\nconst { writePages } = require(`../internal-plugins/query-runner/pages-writer`)\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`./log-line-function`)\n\nconst preferDefault = m => (m && m.default) || m\n\nmodule.exports = async (program: any) => {\n  // Fix program directory path for windows env.\n  program.directory = slash(program.directory)\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  // Delete html files from the public directory as we don't want deleted\n  // pages from previous builds to stick around.\n  let activity = report.activityTimer(`delete html files from previous builds`)\n  activity.start()\n  await del([`public/*.html`, `public/**/*.html`])\n  activity.end()\n\n  // Try opening the site's gatsby-config.js file.\n  activity = report.activityTimer(`open and validate gatsby-config.js`)\n  activity.start()\n  let config\n  try {\n    // $FlowFixMe\n    config = preferDefault(require(`${program.directory}/gatsby-config`))\n  } catch (err) {\n    if (!testRequireError(`${program.directory}/gatsby-config`, err)) {\n      report.error(`Could not load gatsby-config`, err)\n      process.exit(1)\n    }\n  }\n\n  store.dispatch({\n    type: `SET_SITE_CONFIG`,\n    payload: config,\n  })\n\n  activity.end()\n\n  const flattenedPlugins = await loadPlugins(config)\n\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const hashes = await Promise.all([\n    md5File(`package.json`),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-config.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-node.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n  ])\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n  let state = store.getState()\n  const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    report.info(report.stripIndent`\n      One or more of your plugins have changed since the last time you ran Gatsby. As\n      a precaution, we're deleting your site's cache to ensure there's not any stale\n      data\n    `)\n  }\n\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash) {\n    try {\n      await fs.remove(`${program.directory}/.cache`)\n    } catch (e) {\n      report.error(`Failed to remove .cache files.`, e)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  initCache()\n\n  // Ensure the public/static directory is created.\n  await fs.ensureDirSync(`${program.directory}/public/static`)\n\n  // Copy our site files to the root of the site.\n  activity = report.activityTimer(`copy gatsby files`)\n  activity.start()\n  const srcDir = `${__dirname}/../../cache-dir`\n  const siteDir = `${program.directory}/.cache`\n  const tryRequire = `${__dirname}/../utils/test-require-error.js`\n  try {\n    await fs.copy(srcDir, siteDir, { clobber: true })\n    await fs.copy(tryRequire, `${siteDir}/test-require-error.js`, {\n      clobber: true,\n    })\n    await fs.ensureDirSync(`${program.directory}/.cache/json`)\n    await fs.ensureDirSync(`${program.directory}/.cache/layouts`)\n  } catch (err) {\n    report.panic(`Unable to copy site files to .cache`, err)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin) =>\n    // TODO make this async...\n    glob.sync(`${plugin.resolve}/gatsby-${env}*`)[0]\n\n  const ssrPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n  const browserPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n\n  let browserAPIRunner = ``\n\n  try {\n    browserAPIRunner = fs.readFileSync(\n      `${siteDir}/api-runner-browser.js`,\n      `utf-8`\n    )\n  } catch (err) {\n    report.panic(`Failed to read ${siteDir}/api-runner-browser.js`, err)\n  }\n\n  const browserPluginsRequires = browserPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n\n  browserAPIRunner = `var plugins = [${browserPluginsRequires}]\\n${browserAPIRunner}`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    report.panic(`Failed to read ${siteDir}/api-runner-ssr.js`, err)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  activity.end()\n\n  // Source nodes\n  activity = report.activityTimer(`source and transform nodes`)\n  activity.start()\n  await require(`../utils/source-nodes`)()\n  activity.end()\n\n  // Create Schema.\n  activity = report.activityTimer(`building schema`)\n  activity.start()\n  await require(`../schema`)()\n  activity.end()\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.js`, `.jsx`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const graphqlRunner = (query, context = {}) => {\n    const schema = store.getState().schema\n    return graphql(schema, query, context, context, context)\n  }\n\n  // Collect layouts.\n  activity = report.activityTimer(`createLayouts`)\n  activity.start()\n  await apiRunnerNode(`createLayouts`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createLayouts`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n\n  // Collect pages.\n  activity = report.activityTimer(`createPages`)\n  activity.start()\n  await apiRunnerNode(`createPages`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPages`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n\n  // A variant on createPages for plugins that want to\n  // have full control over adding/removing pages. The normal\n  // \"createPages\" API is called every time (during development)\n  // that data changes.\n  activity = report.activityTimer(`createPagesStatefully`)\n  activity.start()\n  await apiRunnerNode(`createPagesStatefully`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPagesStatefully`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n  // Extract queries\n  activity = report.activityTimer(`extract queries from components`)\n  activity.start()\n  await extractQueries()\n  activity.end()\n\n  // Start the createPages hot reloader.\n  if (process.env.NODE_ENV !== `production`) {\n    require(`./page-hot-reloader`)(graphqlRunner)\n  }\n\n  // Run queries\n  activity = report.activityTimer(`run graphql queries`)\n  activity.start()\n  await runQueries()\n  activity.end()\n\n  // Write out files.\n  activity = report.activityTimer(`write out page data`)\n  activity.start()\n  await writePages()\n  activity.end()\n\n  // Update Schema for SitePage.\n  activity = report.activityTimer(`update schema`)\n  activity.start()\n  await require(`../schema`)()\n  activity.end()\n\n  // Load the page hot reloader. It listens for node changes\n  // and re-runs `createPages` and removes pages which weren't\n  // recreated.\n  //\n  // Algorithm is make clone of pages, run createPages, remove from\n  // both pages create by plugins only implementing `createPagesStatefully`.\n  // Check for pages not updated (need update timestamp) and remove\n  // those. yeah, just figure out in reducer if the plugin implements\n  // createPagesStatefully and mark the page as stateful to simplify\n  // things.\n  //\n  // TODO fix deleting nodes so we can both add markdown pages\n  // and remove pages as well just by adding/removing markdown files.\n\n  const checkJobsDone = _.debounce(resolve => {\n    const state = store.getState()\n    if (state.jobs.active.length === 0) {\n      report.log(``)\n      report.info(`bootstrap finished - ${process.uptime()} s`)\n      report.log(``)\n      resolve({ graphqlRunner })\n    }\n  }, 100)\n\n  if (store.getState().jobs.active.length === 0) {\n    report.log(``)\n    report.info(`bootstrap finished - ${process.uptime()} s`)\n    report.log(``)\n    return { graphqlRunner }\n  } else {\n    return new Promise(resolve => {\n      // Wait until all side effect jobs are finished.\n      emitter.on(`END_JOB`, () => checkJobsDone(resolve))\n    })\n  }\n}\n"]}