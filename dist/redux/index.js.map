{"version":3,"sources":["../../src/redux/index.js"],"names":["Redux","require","Promise","_","composeWithDevTools","fs","EventEmitter","stringify","emitter","reducers","initialState","JSON","parse","readFileSync","process","cwd","e","store","env","REDUX_DEVTOOLS","sitePackageJSON","composeEnhancers","realtime","port","name","createStore","combineReducers","applyMiddleware","saveState","debounce","pickedState","pick","state","writeFile","subscribe","lastAction","getState","emit","type","onAny","exports","getNodes","nodes","values","getNode","id","hasNodeChanged","digest","node","internal","contentDigest","loadNodeContent","content","resolve","plugin","flattenedPlugins","find","plug","owner","Error","then","getNodeAndSavePathDependency","path","createPageDependency","nodeId"],"mappings":"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","file":"index.js","sourcesContent":["const Redux = require(`redux`)\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst { composeWithDevTools } = require(`remote-redux-devtools`)\nconst fs = require(`fs`)\nconst EventEmitter = require(`eventemitter2`)\nconst stringify = require(`json-stringify-safe`)\n\n// Create event emitter for actions\nconst emitter = new EventEmitter()\n\n// Reducers\nconst reducers = require(`./reducers`)\n\n// Read from cache the old node data.\nlet initialState = {}\ntry {\n  initialState = JSON.parse(\n    fs.readFileSync(`${process.cwd()}/.cache/redux-state.json`)\n  )\n} catch (e) {\n  // ignore errors.\n}\n\nlet store\n// Only setup the Redux devtools if explicitly enabled.\nif (process.env.REDUX_DEVTOOLS === `true`) {\n  const sitePackageJSON = require(`${process.cwd()}/package.json`)\n  const composeEnhancers = composeWithDevTools({\n    realtime: true,\n    port: 19999,\n    name: sitePackageJSON.name,\n  })\n  store = Redux.createStore(\n    Redux.combineReducers({ ...reducers }),\n    initialState,\n    composeEnhancers(Redux.applyMiddleware())\n  )\n} else {\n  store = Redux.createStore(\n    Redux.combineReducers({ ...reducers }),\n    initialState\n  )\n}\n\n// Persist state.\nconst saveState = _.debounce(state => {\n  const pickedState = _.pick(state, [\n    `nodes`,\n    `status`,\n    `componentDataDependencies`,\n  ])\n  fs.writeFile(\n    `${process.cwd()}/.cache/redux-state.json`,\n    stringify(pickedState, null, 2),\n    () => {}\n  )\n}, 1000)\n\nstore.subscribe(() => {\n  const lastAction = store.getState().lastAction\n  emitter.emit(lastAction.type, lastAction)\n})\n\nemitter.onAny(() => {\n  saveState(store.getState())\n})\n\nexports.emitter = emitter\nexports.store = store\nexports.getNodes = () => {\n  let nodes = _.values(store.getState().nodes)\n  return nodes ? nodes : []\n}\nconst getNode = id => store.getState().nodes[id]\nexports.getNode = getNode\nexports.hasNodeChanged = (id, digest) => {\n  const node = store.getState().nodes[id]\n  if (!node) {\n    return true\n  } else {\n    return node.internal.contentDigest !== digest\n  }\n}\n\nexports.loadNodeContent = node => {\n  if (node.internal.content) {\n    return Promise.resolve(node.internal.content)\n  } else {\n    return new Promise(resolve => {\n      // Load plugin's loader function\n      const plugin = store\n        .getState()\n        .flattenedPlugins.find(plug => plug.name === node.internal.owner)\n      const { loadNodeContent } = require(plugin.resolve)\n      if (!loadNodeContent) {\n        throw new Error(\n          `Could not find function loadNodeContent for plugin ${plugin.name}`\n        )\n      }\n\n      return loadNodeContent(node).then(content => {\n        // TODO update node's content field here.\n        resolve(content)\n      })\n    })\n  }\n}\n\nexports.getNodeAndSavePathDependency = (id, path) => {\n  const { createPageDependency } = require(`./actions/add-page-dependency`)\n  const node = getNode(id)\n  createPageDependency({ path, nodeId: id })\n  return node\n}\n\n// Start plugin runner which listens to the store\n// and invokes Gatsby API based on actions.\nrequire(`./plugin-runner`)\n"]}