{"version":3,"sources":["../../src/reporter/index.js"],"names":["createReporter","require","stripIndent","convertHrtime","getErrorFormatter","errorFormatter","reporter","emoji","base","Object","getPrototypeOf","module","exports","assign","setVerbose","isVerbose","panic","args","error","process","exit","message","arguments","length","call","console","log","render","uptime","prefix","verbose","toFixed","activityTimer","name","spinner","activity","start","hrtime","elapsedTime","elapsed","tick","end","success"],"mappings":";;AAEA,MAAM,EAAEA,cAAF,KAAqBC,QAAS,WAAT,CAA3B;AACA,MAAM,EAAEC,WAAF,KAAkBD,QAAS,aAAT,CAAxB;AACA,MAAME,gBAAgBF,QAAS,gBAAT,CAAtB;AACA,MAAM,EAAEG,iBAAF,KAAwBH,QAAS,UAAT,CAA9B;;AAEA,MAAMI,iBAAiBD,mBAAvB;AACA,MAAME,WAAWN,eAAe,EAAEO,OAAO,IAAT,EAAf,CAAjB;AACA,MAAMC,OAAOC,OAAOC,cAAP,CAAsBJ,QAAtB,CAAb;;AAEAK,OAAOC,OAAP,GAAiBH,OAAOI,MAAP,CAAcP,QAAd,EAAwB;AACvCJ,aADuC;;AAGvCY,aAAWC,SAAX,EAAsB;AACpB,SAAKA,SAAL,GAAiB,IAAjB;AACD,GALsC;;AAOvCC,QAAM,GAAGC,IAAT,EAAe;AACb,SAAKC,KAAL,CAAW,GAAGD,IAAd;AACAE,YAAQC,IAAR,CAAa,CAAb;AACD,GAVsC;;AAYvCF,QAAMG,OAAN,EAAeH,KAAf,EAAsB;AACpB,QAAII,UAAUC,MAAV,KAAqB,CAArB,IAA0B,OAAOF,OAAP,KAAoB,QAAlD,EAA2D;AACzDH,cAAQG,OAAR;AACAA,gBAAUH,MAAMG,OAAhB;AACD;AACDb,SAAKU,KAAL,CAAWM,IAAX,CAAgB,IAAhB,EAAsBH,OAAtB;AACA,QAAIH,KAAJ,EAAWO,QAAQC,GAAR,CAAYrB,eAAesB,MAAf,CAAsBT,KAAtB,CAAZ;AACZ,GAnBsC;;AAqBvCU,SAAOC,MAAP,EAAuB;AACrB,SAAKC,OAAL,CAAc,GAAED,MAAO,KAAI,CAACV,QAAQS,MAAR,KAAmB,IAApB,EAA0BG,OAA1B,CAAkC,CAAlC,CAAqC,IAAhE;AACD,GAvBsC;;AAyBvCC,gBAAcC,IAAd,EAAoB;AAClB,UAAMC,UAAU5B,SAAS6B,QAAT,EAAhB;AACA,UAAMC,QAAQjB,QAAQkB,MAAR,EAAd;;AAEA,UAAMC,cAAc,MAAM;AACxB,UAAIC,UAAUpB,QAAQkB,MAAR,CAAeD,KAAf,CAAd;AACA,aAAQ,GAAEjC,cAAcoC,OAAd,EAAwB,SAAxB,EAAkCR,OAAlC,CAA0C,CAA1C,CAA6C,IAAvD;AACD,KAHD;;AAKA,WAAO;AACLK,aAAO,MAAM;AACXF,gBAAQM,IAAR,CAAaP,IAAb;AACD,OAHI;AAILQ,WAAK,MAAM;AACTnC,iBAASoC,OAAT,CAAkB,GAAET,IAAK,MAAKK,aAAc,EAA5C;AACAJ,gBAAQO,GAAR;AACD;AAPI,KAAP;AASD;AA3CsC,CAAxB,CAAjB","file":"index.js","sourcesContent":["// @flow\n\nconst { createReporter } = require(`yurnalist`)\nconst { stripIndent } = require(`common-tags`)\nconst convertHrtime = require(`convert-hrtime`)\nconst { getErrorFormatter } = require(`./errors`)\n\nconst errorFormatter = getErrorFormatter()\nconst reporter = createReporter({ emoji: true })\nconst base = Object.getPrototypeOf(reporter)\n\nmodule.exports = Object.assign(reporter, {\n  stripIndent,\n\n  setVerbose(isVerbose) {\n    this.isVerbose = true\n  },\n\n  panic(...args) {\n    this.error(...args)\n    process.exit(1)\n  },\n\n  error(message, error) {\n    if (arguments.length === 1 && typeof message !== `string`) {\n      error = message\n      message = error.message\n    }\n    base.error.call(this, message)\n    if (error) console.log(errorFormatter.render(error))\n  },\n\n  uptime(prefix: string) {\n    this.verbose(`${prefix}: ${(process.uptime() * 1000).toFixed(3)}ms`)\n  },\n\n  activityTimer(name) {\n    const spinner = reporter.activity()\n    const start = process.hrtime()\n\n    const elapsedTime = () => {\n      var elapsed = process.hrtime(start)\n      return `${convertHrtime(elapsed)[`seconds`].toFixed(3)} s`\n    }\n\n    return {\n      start: () => {\n        spinner.tick(name)\n      },\n      end: () => {\n        reporter.success(`${name} â€” ${elapsedTime()}`)\n        spinner.end()\n      },\n    }\n  },\n})\n"]}