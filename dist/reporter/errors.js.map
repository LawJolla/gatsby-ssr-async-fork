{"version":3,"sources":["../../src/reporter/errors.js"],"names":["PrettyError","require","prepareStackTrace","getErrorFormatter","prettyError","baseRender","render","skipNodeFiles","skipPackage","skip","traceLine","ln","file","appendStyle","marginTop","rendered","call","err","codeFrame","createErrorFromString","errorStr","sourceMapFile","split","message","rest","slice","join","error","Error","stack","name","module","exports"],"mappings":";;AAEA,IAAMA,cAAcC,QAAS,cAAT,CAApB;AACA,IAAMC,oBAAoBD,QAAS,uBAAT,CAA1B;;AAEA,SAASE,iBAAT,GAA6B;AAC3B,MAAMC,cAAc,IAAIJ,WAAJ,EAApB;AACA,MAAMK,aAAaD,YAAYE,MAA/B;;AAEAF,cAAYG,aAAZ;AACAH,cAAYI,WAAZ,CACG,qBADH,EAEG,SAFH,EAGG;AACD;AACA;AALF;;AAQAJ,cAAYK,IAAZ,CAAiB,UAACC,SAAD,EAAYC,EAAZ,EAAmB;AAClC,QAAID,aAAaA,UAAUE,IAAV,KAAoB,qBAArC,EAA2D,OAAO,IAAP;AAC3D,WAAO,KAAP;AACD,GAHD;;AAKAR,cAAYS,WAAZ,CAAwB;AACtB,oBAAgB;AACdC,iBAAW;AADG;AADM,GAAxB;;AAMAV,cAAYE,MAAZ,GAAqB,eAAO;AAC1B,QAAIS,WAAWV,WAAWW,IAAX,CAAgBZ,WAAhB,EAA6Ba,GAA7B,CAAf;AACA,QAAIA,OAAOA,IAAIC,SAAf,EAA0BH,WAAY,KAAIE,IAAIC,SAAU,KAAIH,QAAS,EAA3C;AAC1B,WAAOA,QAAP;AACD,GAJD;AAKA,SAAOX,WAAP;AACD;;AAED;;;;;AAKA,SAASe,qBAAT,CAA+BC,QAA/B,EAAiDC,aAAjD,EAAwE;AAAA,wBAC7CD,SAASE,KAAT,CAAe,cAAf,CAD6C;AAAA,MACjEC,OADiE;AAAA,MACrDC,IADqD;AAEtE;AACA;;AAEAD,YAAUA,QACPD,KADO,CACA,GADA,EAEPG,KAFO,CAED,CAFC,EAGPC,IAHO,CAGD,GAHC,CAAV;;AAKA,MAAIC,QAAQ,IAAIC,KAAJ,CAAUL,OAAV,CAAZ;;AAEAI,QAAME,KAAN,GAAc,CAACN,OAAD,EAAUC,KAAKE,IAAL,CAAW,IAAX,CAAV,EAA2BA,IAA3B,CAAiC,IAAjC,CAAd;;AAEAC,QAAMG,IAAN,GAAc,cAAd;AACA,MAAI;AACF,QAAIT,aAAJ,EAAmBnB,kBAAkByB,KAAlB,EAAyBN,aAAzB;AACpB,GAFD,CAEE,OAAOJ,GAAP,EAAY;AACZ;AACD;AACD,SAAOU,KAAP;AACD;;AAEDI,OAAOC,OAAP,GAAiB;AACfb,uBADe;AAEfhB;AAFe,CAAjB","file":"errors.js","sourcesContent":["// @flow\n\nconst PrettyError = require(`pretty-error`)\nconst prepareStackTrace = require(`./prepare-stack-trace`)\n\nfunction getErrorFormatter() {\n  const prettyError = new PrettyError()\n  const baseRender = prettyError.render\n\n  prettyError.skipNodeFiles()\n  prettyError.skipPackage(\n    `regenerator-runtime`,\n    `graphql`,\n    `core-js`\n    // `static-site-generator-webpack-plugin`,\n    // `tapable`, // webpack\n  )\n\n  prettyError.skip((traceLine, ln) => {\n    if (traceLine && traceLine.file === `asyncToGenerator.js`) return true\n    return false\n  })\n\n  prettyError.appendStyle({\n    \"pretty-error\": {\n      marginTop: 1,\n    },\n  })\n\n  prettyError.render = err => {\n    let rendered = baseRender.call(prettyError, err)\n    if (err && err.codeFrame) rendered = `\\n${err.codeFrame}\\n${rendered}`\n    return rendered\n  }\n  return prettyError\n}\n\n/**\n * Convert a stringified webpack compilation error back into\n * an Error instance so it can be formatted properly\n * @param {string} errorStr\n */\nfunction createErrorFromString(errorStr: string, sourceMapFile: string) {\n  let [message, ...rest] = errorStr.split(/\\r\\n|[\\n\\r]/g)\n  // pull the message from the first line then remove the `Error:` prefix\n  // FIXME: when https://github.com/AriaMinaei/pretty-error/pull/49 is merged\n\n  message = message\n    .split(`:`)\n    .slice(1)\n    .join(`:`)\n\n  let error = new Error(message)\n\n  error.stack = [message, rest.join(`\\n`)].join(`\\n`)\n\n  error.name = `WebpackError`\n  try {\n    if (sourceMapFile) prepareStackTrace(error, sourceMapFile)\n  } catch (err) {\n    // don't shadow a real error because of a parsing issue\n  }\n  return error\n}\n\nmodule.exports = {\n  createErrorFromString,\n  getErrorFormatter,\n}\n"]}