{"version":3,"sources":["../../src/bin/cli.js"],"names":["program","require","packageJson","path","_","Promise","resolveCwd","report","global","onPossiblyUnhandledRejection","error","process","on","panic","defaultHost","inGatsbySite","localPackageJSON","resolve","dependencies","gatsby","err","directory","getSiteInfo","sitePackageJson","join","browserslist","version","usage","command","description","option","action","developPath","develop","p","env","NODE_ENV","buildPath","build","then","success","uptime","exit","servePath","serve","rootPath","starter","newCommand","console","log","subCmd","argv","slice","cmds","map","commands","concat","includes","help","parse"],"mappings":"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","file":"cli.js","sourcesContent":["// babel-preset-env doesn't find this import if you\n// use require() with backtick strings so use the es6 syntax\nimport \"babel-polyfill\"\n\nconst program = require(`commander`)\nconst packageJson = require(`../../package.json`)\nconst path = require(`path`)\nconst _ = require(`lodash`)\nconst Promise = require(`bluebird`)\nconst resolveCwd = require(`resolve-cwd`)\n\nconst report = require(`../reporter`)\n\n// Improve Promise error handling. Maybe... what's the best\n// practice for this these days?\nglobal.Promise = require(`bluebird`)\n\nPromise.onPossiblyUnhandledRejection(error => {\n  report.error(error)\n  throw error\n})\n\nprocess.on(`unhandledRejection`, error => {\n  // This will exit the process in newer Node anyway so lets be consistent\n  // across versions and crash\n  report.panic(`UNHANDLED REJECTION`, error)\n})\n\nprocess.on(`uncaughtException`, error => {\n  report.panic(`UNHANDLED EXCEPTION`, error)\n})\n\nconst defaultHost = `localhost`\n\nlet inGatsbySite = false\nlet localPackageJSON\ntry {\n  localPackageJSON = require(path.resolve(`./package.json`))\n  if (localPackageJSON.dependencies && localPackageJSON.dependencies.gatsby) {\n    inGatsbySite = true\n  }\n} catch (err) {\n  // ignore\n}\n\nconst directory = path.resolve(`.`)\nconst getSiteInfo = () => {\n  const sitePackageJson = require(path.join(directory, `package.json`))\n  const browserslist = sitePackageJson.browserslist || [\n    `> 1%`,\n    `last 2 versions`,\n    `IE >= 9`,\n  ]\n  return { sitePackageJson, browserslist }\n}\n\nprogram.version(packageJson.version).usage(`[command] [options]`)\n\n// If there's a package.json in the current directory w/ a gatsby dependency\n// include the develop/build/serve commands. Otherwise, just the new.\nif (inGatsbySite) {\n  program\n    .command(`develop`)\n    .description(\n      `Start development server. Watches files and rebuilds and hot reloads ` +\n        `if something changes`\n    ) // eslint-disable-line max-len\n    .option(\n      `-H, --host <url>`,\n      `Set host. Defaults to ${defaultHost}`,\n      defaultHost\n    )\n    .option(`-p, --port <port>`, `Set port. Defaults to 8000`, `8000`)\n    .option(`-o, --open`, `Open the site in your browser for you.`)\n    .action(command => {\n      const developPath = resolveCwd(`gatsby/dist/utils/develop`)\n      const develop = require(developPath)\n      // console.timeEnd(`time to load develop`)\n      const { sitePackageJson, browserslist } = getSiteInfo()\n      const p = {\n        ...command,\n        directory,\n        sitePackageJson,\n        browserslist,\n      }\n      develop(p)\n    })\n\n  program\n    .command(`build`)\n    .description(`Build a Gatsby project.`)\n    .option(\n      `--prefix-paths`,\n      `Build site with link paths prefixed (set prefix in your config).`\n    )\n    .action(command => {\n      // Set NODE_ENV to 'production'\n      process.env.NODE_ENV = `production`\n\n      const buildPath = resolveCwd(`gatsby/dist/utils/build`)\n      const build = require(buildPath)\n      const { sitePackageJson, browserslist } = getSiteInfo()\n      const p = {\n        ...command,\n        directory,\n        sitePackageJson,\n        browserslist,\n      }\n      build(p).then(() => {\n        report.success(`Done building in ${process.uptime()} seconds`)\n        process.exit()\n      })\n    })\n\n  program\n    .command(`serve`)\n    .description(`Serve built site.`)\n    .option(\n      `-H, --host <url>`,\n      `Set host. Defaults to ${defaultHost}`,\n      defaultHost\n    )\n    .option(`-p, --port <port>`, `Set port. Defaults to 9000`, `9000`)\n    .option(`-o, --open`, `Open the site in your browser for you.`)\n    .action(command => {\n      const servePath = resolveCwd(`gatsby/dist/utils/serve`)\n      const serve = require(servePath)\n      const { sitePackageJson, browserslist } = getSiteInfo()\n      const p = {\n        ...command,\n        directory,\n        sitePackageJson,\n        browserslist,\n      }\n      serve(p)\n    })\n}\n\nprogram\n  .command(`new [rootPath] [starter]`)\n  .description(`Create new Gatsby project.`)\n  .action((rootPath, starter) => {\n    const newCommand = require(`../utils/new`)\n    newCommand(rootPath, starter)\n  })\n\nprogram.on(`--help`, () => {\n  console.log(\n    `To show subcommand help:\n\n    gatsby [command] -h\n`\n  )\n})\n\n// If the user types an unknown sub-command, just display the help.\nconst subCmd = process.argv.slice(2, 3)[0]\nlet cmds = _.map(program.commands, `_name`)\ncmds = cmds.concat([`--version`, `-V`])\n\nif (!_.includes(cmds, subCmd)) {\n  program.help()\n} else {\n  program.parse(process.argv)\n}\n"]}