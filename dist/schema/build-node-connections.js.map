{"version":3,"sources":["../../src/schema/build-node-connections.js"],"names":["_","require","connectionArgs","connectionDefinitions","GraphQLInputObjectType","inferInputObjectStructureFromNodes","inferInputObjectStructureFromFields","createSortField","buildConnectionFields","getNodes","module","exports","types","connections","each","type","name","nodes","typeName","connectionType","typeConnection","nodeType","nodeObjectType","connectionFields","inferredInputFieldsFromNodes","inferredInputFieldsFromPlugins","fields","fieldsFromPlugins","filterFields","merge","inferredFields","sortNames","sort","concat","camelCase","description","args","filter","resolve","object","resolveArgs","b","rootValue","path","componentChunkName","includes","id","runSift","latestNodes","n","internal","connection","node"],"mappings":"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","file":"build-node-connections.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst { connectionArgs, connectionDefinitions } = require(`graphql-skip-limit`)\nconst { GraphQLInputObjectType } = require(`graphql`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst {\n  inferInputObjectStructureFromFields,\n  createSortField,\n} = require(`./infer-graphql-input-fields-from-fields`)\n\nconst buildConnectionFields = require(`./build-connection-fields`)\nconst { getNodes } = require(`../redux`)\n\nmodule.exports = (types: any) => {\n  const connections = {}\n\n  _.each(types, (type /* , fieldName*/) => {\n    // Don't create a connection for the Site node since there can only be one\n    // of them.\n    if (type.name === `Site`) {\n      return\n    }\n    const nodes = type.nodes\n    const typeName = `${type.name}Connection`\n    const { connectionType: typeConnection } = connectionDefinitions({\n      nodeType: type.nodeObjectType,\n      connectionFields: () => buildConnectionFields(type),\n    })\n\n    const inferredInputFieldsFromNodes = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: type.fieldsFromPlugins,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferredInputFieldsFromNodes.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n    const sortNames = inferredInputFieldsFromNodes.sort.concat(\n      inferredInputFieldsFromPlugins.sort\n    )\n    const sort = createSortField(typeName, sortNames)\n\n    connections[_.camelCase(`all ${type.name}`)] = {\n      type: typeConnection,\n      description: `Connection to all ${type.name} nodes`,\n      args: {\n        ...connectionArgs,\n        sort,\n        filter: {\n          type: new GraphQLInputObjectType({\n            name: _.camelCase(`filter ${type.name}`),\n            description: `Filter connection on its fields`,\n            fields: () => filterFields,\n          }),\n        },\n      },\n      resolve(object, resolveArgs, b, { rootValue }) {\n        let path\n        if (typeof rootValue !== `undefined`) {\n          path = rootValue.path\n        }\n        // If path isn't set, this is probably a layout\n        if (\n          !path &&\n          rootValue &&\n          rootValue.componentChunkName &&\n          _.includes(rootValue.componentChunkName, `layout`)\n        ) {\n          path = `LAYOUT___${rootValue.id}`\n        }\n        const runSift = require(`./run-sift`)\n        const latestNodes = _.filter(\n          getNodes(),\n          n => n.internal.type === type.name\n        )\n        return runSift({\n          args: resolveArgs,\n          nodes: latestNodes,\n          connection: true,\n          path,\n          type: type.node.type,\n        })\n      },\n    }\n  })\n\n  return connections\n}\n"]}