{"version":3,"sources":["../../src/schema/infer-graphql-input-fields-from-fields.js"],"names":["inferInputObjectStructureFromFields","createSortField","require","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLEnumType","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","oneLine","_","invariant","typeOf","createTypeName","createKey","extractFieldExamples","buildFieldEnumValues","isEmptyObjectOrArray","makeNullable","type","ofType","convertToInputType","name","fields","transform","getFields","out","fieldConfig","key","e","console","log","Error","constructor","scalarFilterMap","Int","eq","ne","Float","String","regex","glob","Boolean","convertToInputFilter","prefix","upperFirst","innerType","innerFields","in","extractFieldNamesFromInputField","accu","push","each","typeName","inferredFields","sort","inputType","filterType","fieldNames","enumValues","forEach","field","value","SortByType","values","camelCase","order","defaultValue","ASC","DESC"],"mappings":"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","file":"infer-graphql-input-fields-from-fields.js","sourcesContent":["// @flow\n\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} = require(`graphql`)\n\nimport type { GraphQLInputType, GraphQLType } from \"graphql\"\n\nconst { oneLine } = require(`common-tags`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst typeOf = require(`type-of`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  extractFieldExamples,\n  buildFieldEnumValues,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\n\nimport type {\n  GraphQLInputFieldConfig,\n  GraphQLInputFieldConfigMap,\n} from \"graphql/type/definition\"\n\ntype GraphQLNullableInputType<T> =\n  | GraphQLScalarType\n  | GraphQLEnumType\n  | GraphQLInputObjectType\n  | GraphQLList<T>\n\nfunction makeNullable(type: GraphQLInputType): GraphQLNullableInputType<any> {\n  if (type instanceof GraphQLNonNull) {\n    return type.ofType\n  }\n  return type\n}\n\nfunction convertToInputType(type: GraphQLType): GraphQLInputType {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLEnumType) {\n    return type\n  } else if (type instanceof GraphQLObjectType) {\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${type.name}InputObject`),\n      fields: _.transform(type.getFields(), (out, fieldConfig, key) => {\n        try {\n          const type = convertToInputType(fieldConfig.type)\n          out[key] = { type }\n        } catch (e) {\n          console.log(e)\n        }\n      }),\n    })\n  } else if (type instanceof GraphQLList) {\n    return new GraphQLList(makeNullable(convertToInputType(type.ofType)))\n  } else if (type instanceof GraphQLNonNull) {\n    return new GraphQLNonNull(makeNullable(convertToInputType(type.ofType)))\n  } else if (type instanceof GraphQLInterfaceType) {\n    throw new Error(`GraphQLInterfaceType not yet implemented`)\n  } else if (type instanceof GraphQLUnionType) {\n    throw new Error(`GraphQLUnionType not yet implemented`)\n  } else {\n    throw new Error(\n      `Invalid input type ${type && type.constructor && type.constructor.name}`\n    )\n  }\n}\n\nconst scalarFilterMap = {\n  Int: {\n    eq: { type: GraphQLInt },\n    ne: { type: GraphQLInt },\n  },\n  Float: {\n    eq: { type: GraphQLFloat },\n    ne: { type: GraphQLFloat },\n  },\n  String: {\n    eq: { type: GraphQLString },\n    ne: { type: GraphQLString },\n    regex: { type: GraphQLString },\n    glob: { type: GraphQLString },\n  },\n  Boolean: {\n    eq: { type: GraphQLBoolean },\n    ne: { type: GraphQLBoolean },\n  },\n}\n\nfunction convertToInputFilter(\n  prefix: string,\n  type: GraphQLInputType\n): GraphQLInputObjectType {\n  if (type instanceof GraphQLScalarType) {\n    const name = type.name\n    const fields = scalarFilterMap[name]\n\n    if (fields == null) {\n      throw new Error(`Unknown scalar type for input filter`)\n    }\n\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}Query${name}`),\n      fields: fields,\n    })\n  } else if (type instanceof GraphQLInputObjectType) {\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}{type.name}`),\n      fields: _.transform(type.getFields(), (out, fieldConfig, key) => {\n        try {\n          const type = convertToInputFilter(\n            `${prefix}${_.upperFirst(key)}`,\n            fieldConfig.type\n          )\n          out[key] = { type }\n        } catch (e) {\n          console.log(e)\n        }\n      }),\n    })\n  } else if (type instanceof GraphQLList) {\n    const innerType = type.ofType\n    let innerFields = {}\n    try {\n      innerFields = convertToInputFilter(\n        `${prefix}ListElem`,\n        innerType\n      ).getFields()\n    } catch (e) {\n      console.log(e)\n    }\n\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}QueryList`),\n      fields: {\n        ...innerFields,\n        in: { type: new GraphQLList(innerType) },\n      },\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    return convertToInputFilter(prefix, type.ofType)\n  }\n\n  throw new Error(`Unknown input field type`)\n}\n\nfunction extractFieldNamesFromInputField(\n  prefix: string,\n  type: GraphQLInputType,\n  accu: string[]\n) {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLList) {\n    accu.push(prefix)\n  } else if (type instanceof GraphQLInputObjectType) {\n    _.each(type.getFields(), (fieldConfig, key) => {\n      extractFieldNamesFromInputField(\n        `${prefix}___${key}`,\n        fieldConfig.type,\n        accu\n      )\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    extractFieldNamesFromInputField(prefix, type.ofType, accu)\n  } else {\n    throw new Error(`Unknown input field type`)\n  }\n}\n\n// convert output fields to output fields and a list of fields to sort on\nexport function inferInputObjectStructureFromFields({\n  fields,\n  typeName = ``,\n}: any) {\n  const inferredFields = {}\n  const sort = []\n\n  _.each(fields, (fieldConfig, key) => {\n    try {\n      const inputType = convertToInputType(fieldConfig.type)\n      const filterType = convertToInputFilter(_.upperFirst(key), inputType)\n\n      inferredFields[createKey(key)] = {\n        type: filterType,\n      }\n\n      // Add sorting (but only to the top level).\n      if (typeName) {\n        extractFieldNamesFromInputField(key, inputType, sort)\n      }\n    } catch (e) {\n      console.log(key, fieldConfig, e)\n    }\n  })\n\n  return { inferredFields, sort }\n}\n\n// builds an input field for sorting, given an array of names to sort on\nexport function createSortField(typeName: string, fieldNames: string[]) {\n  const enumValues = {}\n  fieldNames.forEach(field => {\n    enumValues[createKey(field)] = { value: field }\n  })\n\n  const SortByType = new GraphQLEnumType({\n    name: `${typeName}SortByFieldsEnum`,\n    values: enumValues,\n  })\n\n  return {\n    type: new GraphQLInputObjectType({\n      name: _.camelCase(`${typeName} sort`),\n      fields: {\n        fields: {\n          name: _.camelCase(`${typeName} sortFields`),\n          type: new GraphQLNonNull(new GraphQLList(SortByType)),\n        },\n        order: {\n          name: _.camelCase(`${typeName} sortOrder`),\n          defaultValue: `asc`,\n          type: new GraphQLEnumType({\n            name: _.camelCase(`${typeName} sortOrderValues`),\n            values: {\n              ASC: { value: `asc` },\n              DESC: { value: `desc` },\n            },\n          }),\n        },\n      },\n    }),\n  }\n}\n"]}