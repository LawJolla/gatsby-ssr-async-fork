{"version":3,"sources":["../../src/schema/infer-graphql-input-fields-from-fields.js"],"names":["inferInputObjectStructureFromFields","createSortField","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLEnumType","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","require","oneLine","_","invariant","typeOf","createTypeName","createKey","extractFieldExamples","buildFieldEnumValues","isEmptyObjectOrArray","makeNullable","type","ofType","convertToInputType","name","fields","transform","getFields","out","fieldConfig","key","e","console","log","Error","constructor","scalarFilterMap","Int","eq","ne","Float","String","regex","glob","Boolean","convertToInputFilter","prefix","upperFirst","innerType","innerFields","in","extractFieldNamesFromInputField","accu","push","each","typeName","inferredFields","sort","inputType","filterType","fieldNames","enumValues","forEach","field","value","SortByType","values","camelCase","order","defaultValue","ASC","DESC"],"mappings":"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","file":"infer-graphql-input-fields-from-fields.js","sourcesContent":["// @flow\n\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} = require(`graphql`)\n\nimport type { GraphQLInputType, GraphQLType } from \"graphql\"\n\nconst { oneLine } = require(`common-tags`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst typeOf = require(`type-of`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  extractFieldExamples,\n  buildFieldEnumValues,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\n\nimport type {\n  GraphQLInputFieldConfig,\n  GraphQLInputFieldConfigMap,\n} from \"graphql/type/definition\"\n\ntype GraphQLNullableInputType<T> =\n  | GraphQLScalarType\n  | GraphQLEnumType\n  | GraphQLInputObjectType\n  | GraphQLList<T>\n\nfunction makeNullable(type: GraphQLInputType): GraphQLNullableInputType<any> {\n  if (type instanceof GraphQLNonNull) {\n    return type.ofType\n  }\n  return type\n}\n\nfunction convertToInputType(type: GraphQLType): GraphQLInputType {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLEnumType) {\n    return type\n  } else if (type instanceof GraphQLObjectType) {\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${type.name}InputObject`),\n      fields: _.transform(type.getFields(), (out, fieldConfig, key) => {\n        try {\n          const type = convertToInputType(fieldConfig.type)\n          out[key] = { type }\n        } catch (e) {\n          console.log(e)\n        }\n      }),\n    })\n  } else if (type instanceof GraphQLList) {\n    return new GraphQLList(makeNullable(convertToInputType(type.ofType)))\n  } else if (type instanceof GraphQLNonNull) {\n    return new GraphQLNonNull(makeNullable(convertToInputType(type.ofType)))\n  } else if (type instanceof GraphQLInterfaceType) {\n    throw new Error(`GraphQLInterfaceType not yet implemented`)\n  } else if (type instanceof GraphQLUnionType) {\n    throw new Error(`GraphQLUnionType not yet implemented`)\n  } else {\n    throw new Error(\n      `Invalid input type ${type && type.constructor && type.constructor.name}`\n    )\n  }\n}\n\nconst scalarFilterMap = {\n  Int: {\n    eq: { type: GraphQLInt },\n    ne: { type: GraphQLInt },\n  },\n  Float: {\n    eq: { type: GraphQLFloat },\n    ne: { type: GraphQLFloat },\n  },\n  String: {\n    eq: { type: GraphQLString },\n    ne: { type: GraphQLString },\n    regex: { type: GraphQLString },\n    glob: { type: GraphQLString },\n  },\n  Boolean: {\n    eq: { type: GraphQLBoolean },\n    ne: { type: GraphQLBoolean },\n  },\n}\n\nfunction convertToInputFilter(\n  prefix: string,\n  type: GraphQLInputType\n): GraphQLInputObjectType {\n  if (type instanceof GraphQLScalarType) {\n    const name = type.name\n    const fields = scalarFilterMap[name]\n\n    if (fields == null) {\n      throw new Error(`Unknown scalar type for input filter`)\n    }\n\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}Query${name}`),\n      fields: fields,\n    })\n  } else if (type instanceof GraphQLInputObjectType) {\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}{type.name}`),\n      fields: _.transform(type.getFields(), (out, fieldConfig, key) => {\n        try {\n          const type = convertToInputFilter(\n            `${prefix}${_.upperFirst(key)}`,\n            fieldConfig.type\n          )\n          out[key] = { type }\n        } catch (e) {\n          console.log(e)\n        }\n      }),\n    })\n  } else if (type instanceof GraphQLList) {\n    const innerType = type.ofType\n    let innerFields = {}\n    try {\n      innerFields = convertToInputFilter(\n        `${prefix}ListElem`,\n        innerType\n      ).getFields()\n    } catch (e) {\n      console.log(e)\n    }\n\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}QueryList`),\n      fields: {\n        ...innerFields,\n        in: { type: new GraphQLList(innerType) },\n      },\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    return convertToInputFilter(prefix, type.ofType)\n  }\n\n  throw new Error(`Unknown input field type`)\n}\n\nfunction extractFieldNamesFromInputField(\n  prefix: string,\n  type: GraphQLInputType,\n  accu: string[]\n) {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLList) {\n    accu.push(prefix)\n  } else if (type instanceof GraphQLInputObjectType) {\n    _.each(type.getFields(), (fieldConfig, key) => {\n      extractFieldNamesFromInputField(\n        `${prefix}___${key}`,\n        fieldConfig.type,\n        accu\n      )\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    extractFieldNamesFromInputField(prefix, type.ofType, accu)\n  } else {\n    throw new Error(`Unknown input field type`)\n  }\n}\n\n// convert output fields to output fields and a list of fields to sort on\nexport function inferInputObjectStructureFromFields({\n  fields,\n  typeName = ``,\n}: any) {\n  const inferredFields = {}\n  const sort = []\n\n  _.each(fields, (fieldConfig, key) => {\n    try {\n      const inputType = convertToInputType(fieldConfig.type)\n      const filterType = convertToInputFilter(_.upperFirst(key), inputType)\n\n      inferredFields[createKey(key)] = {\n        type: filterType,\n      }\n\n      // Add sorting (but only to the top level).\n      if (typeName) {\n        extractFieldNamesFromInputField(key, inputType, sort)\n      }\n    } catch (e) {\n      console.log(key, fieldConfig, e)\n    }\n  })\n\n  return { inferredFields, sort }\n}\n\n// builds an input field for sorting, given an array of names to sort on\nexport function createSortField(typeName: string, fieldNames: string[]) {\n  const enumValues = {}\n  fieldNames.forEach(field => {\n    enumValues[createKey(field)] = { value: field }\n  })\n\n  const SortByType = new GraphQLEnumType({\n    name: `${typeName}SortByFieldsEnum`,\n    values: enumValues,\n  })\n\n  return {\n    type: new GraphQLInputObjectType({\n      name: _.camelCase(`${typeName} sort`),\n      fields: {\n        fields: {\n          name: _.camelCase(`${typeName} sortFields`),\n          type: new GraphQLNonNull(new GraphQLList(SortByType)),\n        },\n        order: {\n          name: _.camelCase(`${typeName} sortOrder`),\n          defaultValue: `asc`,\n          type: new GraphQLEnumType({\n            name: _.camelCase(`${typeName} sortOrderValues`),\n            values: {\n              ASC: { value: `asc` },\n              DESC: { value: `desc` },\n            },\n          }),\n        },\n      },\n    }),\n  }\n}\n"]}