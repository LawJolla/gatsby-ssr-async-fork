{"version":3,"sources":["../../src/schema/infer-graphql-input-fields.js"],"names":["inferInputObjectStructureFromNodes","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLEnumType","GraphQLNonNull","require","oneLine","_","invariant","typeOf","createTypeName","createKey","extractFieldExamples","extractFieldNames","isEmptyObjectOrArray","typeFields","type","eq","ne","regex","glob","inferGraphQLInputFields","value","nodes","prefix","headValue","headType","isInteger","inType","inferredField","name","fields","in","exampleValue","inferredFields","isEmpty","EXCLUDE_KEYS","parent","children","typeName","isRoot","each","key","includes","field","upperFirst","sort"],"mappings":"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","file":"infer-graphql-input-fields.js","sourcesContent":["// @flow\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n} = require(`graphql`)\nconst { oneLine } = require(`common-tags`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst typeOf = require(`type-of`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  extractFieldExamples,\n  extractFieldNames,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\n\nimport type {\n  GraphQLInputFieldConfig,\n  GraphQLInputFieldConfigMap,\n} from \"graphql/type/definition\"\n\nfunction typeFields(type): GraphQLInputFieldConfigMap {\n  switch (type) {\n    case `boolean`:\n      return {\n        eq: { type: GraphQLBoolean },\n        ne: { type: GraphQLBoolean },\n      }\n    case `string`:\n      return {\n        eq: { type: GraphQLString },\n        ne: { type: GraphQLString },\n        regex: { type: GraphQLString },\n        glob: { type: GraphQLString },\n      }\n    case `int`:\n      return {\n        eq: { type: GraphQLInt },\n        ne: { type: GraphQLInt },\n      }\n    case `float`:\n      return {\n        eq: { type: GraphQLFloat },\n        ne: { type: GraphQLFloat },\n      }\n  }\n  return {}\n}\n\nfunction inferGraphQLInputFields({\n  value,\n  nodes,\n  prefix,\n}): ?GraphQLInputFieldConfig {\n  if (value == null || isEmptyObjectOrArray(value)) return null\n\n  switch (typeOf(value)) {\n    case `array`: {\n      const headValue = value[0]\n      let headType = typeOf(headValue)\n\n      if (headType === `number`)\n        headType = _.isInteger(headValue) ? `int` : `float`\n\n      // Determine type for in operator.\n      let inType\n      switch (headType) {\n        case `int`:\n          inType = GraphQLInt\n          break\n        case `float`:\n          inType = GraphQLFloat\n          break\n        case `string`:\n          inType = GraphQLString\n          break\n        case `boolean`:\n          inType = GraphQLBoolean\n          break\n        case `array`:\n        case `object`: {\n          let inferredField = inferGraphQLInputFields({\n            value: headValue,\n            prefix,\n            nodes,\n          })\n          invariant(\n            inferredField,\n            `Could not infer graphQL type for value: ${headValue}`\n          )\n          inType = inferredField.type\n          break\n        }\n        default:\n          invariant(\n            false,\n            oneLine`\n              Could not infer an appropriate GraphQL input type\n              for value: ${headValue} of type ${headType} along path: ${prefix}\n            `\n          )\n      }\n\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryList`),\n          fields: {\n            ...typeFields(headType),\n            in: { type: new GraphQLList(inType) },\n          },\n        }),\n      }\n    }\n    case `boolean`: {\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryBoolean`),\n          fields: typeFields(`boolean`),\n        }),\n      }\n    }\n    case `string`: {\n      return {\n        type: new GraphQLInputObjectType({\n          name: createTypeName(`${prefix}QueryString`),\n          fields: typeFields(`string`),\n        }),\n      }\n    }\n    case `object`: {\n      const fields = inferInputObjectStructureFromNodes({\n        nodes,\n        prefix,\n        exampleValue: value,\n      }).inferredFields\n      if (!_.isEmpty(fields)) {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}InputObject`),\n            fields,\n          }),\n        }\n      } else {\n        return null\n      }\n    }\n    case `number`: {\n      if (value % 1 === 0) {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}QueryInteger`),\n            fields: typeFields(`int`),\n          }),\n        }\n      } else {\n        return {\n          type: new GraphQLInputObjectType({\n            name: createTypeName(`${prefix}QueryFloat`),\n            fields: typeFields(`float`),\n          }),\n        }\n      }\n    }\n    default:\n      return null\n  }\n}\n\nconst EXCLUDE_KEYS = {\n  parent: 1,\n  children: 1,\n}\n\ntype InferInputOptions = {\n  nodes: Object[],\n  typeName?: string,\n  prefix?: string,\n  exampleValue?: Object,\n}\n\nexport function inferInputObjectStructureFromNodes({\n  nodes,\n  typeName = ``,\n  prefix = ``,\n  exampleValue = extractFieldExamples(nodes),\n}: InferInputOptions): Object {\n  const inferredFields = {}\n  const isRoot = !prefix\n\n  prefix = isRoot ? typeName : prefix\n\n  _.each(exampleValue, (value, key) => {\n    // Remove fields for traversing through nodes as we want to control\n    // setting traversing up not try to automatically infer them.\n    if (isRoot && EXCLUDE_KEYS[key]) return\n\n    // Input arguments on linked fields aren't currently supported\n    if (_.includes(key, `___NODE`)) return\n\n    let field = inferGraphQLInputFields({\n      nodes,\n      value,\n      prefix: `${prefix}${_.upperFirst(key)}`,\n    })\n\n    if (field == null) return\n    inferredFields[createKey(key)] = field\n  })\n\n  // Add sorting (but only to the top level).\n  let sort = []\n  if (typeName) {\n    sort = extractFieldNames(nodes)\n  }\n\n  return { inferredFields, sort }\n}\n"]}