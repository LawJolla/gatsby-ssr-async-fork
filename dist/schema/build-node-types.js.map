{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","GraphQLString","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromFields","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","getNodeAndSavePathDependency","createPageDependency","module","exports","types","groupBy","node","internal","type","processedTypes","createNodeFields","defaultNodeFields","id","description","parent","resolve","a","context","path","children","map","childNodesByType","nodes","flatMap","camelCase","undefined","value","Object","keys","forEach","childNodeType","maxChildCount","maxBy","values","c","g","length","nodeObjectType","filteredNodes","filter","n","nodeId","childNode","find","inferredFields","allNodes","fieldsFromPlugins","createType","typeName","intermediateType","name","traceId","mergedFieldsFromPlugins","merge","inferredInputFieldsFromPlugins","fields","gqlType","interfaces","proccesedType","isTypeOf","inferedInputFields","filterFields","args","runSift","latestNodes","isObject","Promise","all"],"mappings":";;;;;;AASA;;;;AARA,MAAMA,IAAIC,QAAS,QAAT,CAAV;AACA,MAAM;AACJC,mBADI;AAEJC,gBAFI;AAGJC,WAHI;AAIJC,aAJI;AAKJC;AALI,IAMFL,QAAS,SAAT,CANJ;;;AASA,MAAMM,YAAYN,QAAS,0BAAT,CAAlB;AACA,MAAM,EAAEO,6BAAF,KAAoCP,QAAS,sBAAT,CAA1C;AACA,MAAM;AACJQ;AADI,IAEFR,QAAS,0CAAT,CAFJ;AAGA,MAAM;AACJS;AADI,IAEFT,QAAS,8BAAT,CAFJ;AAGA,MAAM,EAAEU,aAAF,KAAoBV,QAAS,kBAAT,CAA1B;AACA,MAAM,EAAEW,QAAF,EAAYC,OAAZ,EAAqBC,4BAArB,KAAsDb,QAAS,UAAT,CAA5D;AACA,MAAM,EAAEc,oBAAF,KAA2Bd,QAAS,sCAAT,CAAjC;;AAMAe,OAAOC,OAAP,GAAiB,YAAY;AAC3B,QAAMC,QAAQlB,EAAEmB,OAAF,CAAUP,UAAV,EAAsBQ,QAAQA,KAAKC,QAAL,CAAcC,IAA5C,CAAd;AACA,QAAMC,iBAA0B,EAAhC;;AAEA,WAASC,gBAAT,CAA0BF,IAA1B,EAAmD;AACjD,UAAMG,oBAAoB;AACxBC,UAAI;AACFJ,cAAM,IAAInB,cAAJ,CAAmBC,SAAnB,CADJ;AAEFuB,qBAAc;AAFZ,OADoB;AAKxBC,cAAQ;AACNN,cAAMX,aADA;AAENgB,qBAAc,0BAFR;AAGNE,gBAAQT,IAAR,EAAcU,CAAd,EAAiBC,OAAjB,EAA0B;AACxB,iBAAOjB,6BAA6BM,KAAKQ,MAAlC,EAA0CG,QAAQC,IAAlD,CAAP;AACD;AALK,OALgB;AAYxBC,gBAAU;AACRX,cAAM,IAAIjB,WAAJ,CAAgBM,aAAhB,CADE;AAERgB,qBAAc,4BAFN;AAGRE,gBAAQT,IAAR,EAAcU,CAAd,EAAiB,EAAEE,IAAF,EAAjB,EAA2B;AACzB,iBAAOZ,KAAKa,QAAL,CAAcC,GAAd,CAAkBR,MAAMZ,6BAA6BY,EAA7B,EAAiCM,IAAjC,CAAxB,CAAP;AACD;AALO;;AASZ;AACA;AAtB0B,KAA1B,CAuBA,MAAMG,mBAAmBnC,EAAEsB,KAAKc,KAAP,EACtBC,OADsB,CACd,CAAC,EAAEJ,QAAF,EAAD,KAAkBA,SAASC,GAAT,CAAarB,OAAb,CADJ,EAEtBM,OAFsB,CAGrBC,QAASA,KAAKC,QAAL,GAAgBrB,EAAEsC,SAAF,CAAYlB,KAAKC,QAAL,CAAcC,IAA1B,CAAhB,GAAkDiB,SAHtC,EAKtBC,KALsB,EAAzB;;AAOAC,WAAOC,IAAP,CAAYP,gBAAZ,EAA8BQ,OAA9B,CAAsCC,iBAAiB;AACrD;AACA,YAAMC,gBAAgB7C,EAAE8C,KAAF,CACpB9C,EAAE+C,MAAF,CAAS/C,EAAEmB,OAAF,CAAUgB,iBAAiBS,aAAjB,CAAV,EAA2CI,KAAKA,EAAEpB,MAAlD,CAAT,CADoB,EAEpBqB,KAAKA,EAAEC,MAFa,EAGpBA,MAHF;;AAKA,UAAIL,gBAAgB,CAApB,EAAuB;AACrBpB,0BAAkBzB,EAAEsC,SAAF,CAAa,YAAWM,aAAc,EAAtC,CAAlB,IAA8D;AAC5DtB,gBAAM,IAAIjB,WAAJ,CAAgBkB,eAAeqB,aAAf,EAA8BO,cAA9C,CADsD;AAE5DxB,uBAAc,qCAAoCiB,aAAc,EAFJ;AAG5Df,kBAAQT,IAAR,EAAcU,CAAd,EAAiB,EAAEE,IAAF,EAAjB,EAA2B;AACzB,kBAAMoB,gBAAgBhC,KAAKa,QAAL,CACnBC,GADmB,CACfR,MAAMb,QAAQa,EAAR,CADS,EAEnB2B,MAFmB,CAGlB,CAAC,EAAEhC,QAAF,EAAD,KAAkBrB,EAAEsC,SAAF,CAAYjB,SAASC,IAArB,MAA+BsB,aAH/B,CAAtB;;AAMA;AACAQ,0BAAcT,OAAd,CAAsBW,KACpBvC,qBAAqB,EAAEiB,IAAF,EAAQuB,QAAQD,EAAE5B,EAAlB,EAArB,CADF;AAGA,mBAAO0B,aAAP;AACD;AAf2D,SAA9D;AAiBD,OAlBD,MAkBO;AACL3B,0BAAkBzB,EAAEsC,SAAF,CAAa,SAAQM,aAAc,EAAnC,CAAlB,IAA2D;AACzDtB,gBAAMC,eAAeqB,aAAf,EAA8BO,cADqB;AAEzDxB,uBAAc,kCAAiCiB,aAAc,EAFJ;AAGzDf,kBAAQT,IAAR,EAAcU,CAAd,EAAiB,EAAEE,IAAF,EAAjB,EAA2B;AACzB,kBAAMwB,YAAYpC,KAAKa,QAAL,CACfC,GADe,CACXR,MAAMb,QAAQa,EAAR,CADK,EAEf+B,IAFe,CAGd,CAAC,EAAEpC,QAAF,EAAD,KAAkBrB,EAAEsC,SAAF,CAAYjB,SAASC,IAArB,MAA+BsB,aAHnC,CAAlB;;AAMA,gBAAIY,SAAJ,EAAe;AACb;AACAzC,mCAAqB,EAAEiB,IAAF,EAAQuB,QAAQC,UAAU9B,EAA1B,EAArB;AACA,qBAAO8B,SAAP;AACD;AACD,mBAAO,IAAP;AACD;AAhBwD,SAA3D;AAkBD;AACF,KA7CD;;AA+CA,UAAME,iBAAiBlD,8BAA8B;AACnD4B,aAAOd,KAAKc,KADuC;AAEnDlB,aAAOlB,EAAE+C,MAAF,CAASxB,cAAT,CAF4C;AAGnDoC,gBAAU/C;AAHyC,KAA9B,CAAvB;;AAMA,sCACKa,iBADL,EAEKiC,cAFL,EAGKpC,KAAKsC,iBAHV;AAKD;;AAED,iBAAeC,UAAf,CAA0BzB,KAA1B,EAAiC0B,QAAjC,EAA2C;AACzC,UAAMC,mBAAmB,EAAzB;;AAEAA,qBAAiBC,IAAjB,GAAwBF,QAAxB;AACAC,qBAAiB3B,KAAjB,GAAyBA,KAAzB;;AAEA,UAAMwB,oBAAoB,MAAMrD,UAAW,4BAAX,EAAwC;AACtEe,YAAMyC,gBADgE;AAEtEJ,gBAAU/C,UAF4D;AAGtEqD,eAAU;AAH4D,KAAxC,CAAhC;;AAMA,UAAMC,0BAA0BlE,EAAEmE,KAAF,CAAQ,GAAGP,iBAAX,CAAhC;;AAEA,UAAMQ,iCAAiC3D,oCAAoC;AACzE4D,cAAQH;AADiE,KAApC,CAAvC;;AAIA,UAAMI,UAAU,IAAIpE,iBAAJ,CAAsB;AACpC8D,YAAMF,QAD8B;AAEpCnC,mBAAc,gBAAemC,QAAS,EAFF;AAGpCS,kBAAY,CAAC5D,aAAD,CAHwB;AAIpC0D,cAAQ,MAAM7C,iBAAiBgD,aAAjB,CAJsB;AAKpCC,gBAAUjC,SAASA,MAAMnB,QAAN,CAAeC,IAAf,KAAwBwC;AALP,KAAtB,CAAhB;;AAQA,UAAMY,qBAAqBhE,mCAAmC;AAC5D0B,WAD4D;AAE5D0B;AAF4D,KAAnC,CAA3B;;AAKA,UAAMa,eAAe3E,EAAEmE,KAAF,CACnB,EADmB,EAEnBO,mBAAmBhB,cAFA,EAGnBU,+BAA+BV,cAHZ,CAArB;;AAMA,UAAMc,2CACDT,gBADC;AAEJH,yBAAmBM,uBAFf;AAGJf,sBAAgBmB,OAHZ;AAIJlD,YAAM;AACJ4C,cAAMF,QADF;AAEJxC,cAAMgD,OAFF;AAGJM,cAAMD,YAHF;AAIJ9C,gBAAQC,CAAR,EAAW8C,IAAX,EAAiB7C,OAAjB,EAA0B;AACxB,gBAAM8C,UAAU5E,QAAS,YAAT,CAAhB;AACA,gBAAM6E,cAAc9E,EAAEqD,MAAF,CAClBzC,UADkB,EAElB0C,KAAKA,EAAEjC,QAAF,CAAWC,IAAX,KAAoBwC,QAFP,CAApB;AAIA,cAAI,CAAC9D,EAAE+E,QAAF,CAAWH,IAAX,CAAL,EAAuB;AACrBA,mBAAO,EAAP;AACD;AACD,iBAAOC,QAAQ;AACbD,kBAAM,EAAEvB,mCAAauB,IAAb,CAAF,EADO;AAEbxC,mBAAO0C,WAFM;AAGb9C,kBAAMD,QAAQC,IAAR,GAAeD,QAAQC,IAAvB,GAA+B,YAAWD,QAAQL,EAAG,EAH9C;AAIbJ,kBAAMgD;AAJO,WAAR,CAAP;AAMD;AAnBG;AAJF,MAAN;;AA2BA/C,mBAAevB,EAAEsC,SAAF,CAAYwB,QAAZ,CAAf,IAAwCU,aAAxC;AACD;;AAED;AACA,QAAMQ,QAAQC,GAAR,CAAYjF,EAAEkC,GAAF,CAAMhB,KAAN,EAAa2C,UAAb,CAAZ,CAAN;;AAEA,SAAOtC,cAAP;AACD,CAtKD","file":"build-node-types.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n  GraphQLString,\n} = require(`graphql`)\nimport { NAMED_TYPE } from \"graphql/language/kinds\"\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode, getNodeAndSavePathDependency } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = { [typeName: string]: ProcessedNodeType }\n\nmodule.exports = async () => {\n  const types = _.groupBy(getNodes(), node => node.internal.type)\n  const processedTypes: TypeMap = {}\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve(node, a, context) {\n          return getNodeAndSavePathDependency(node.parent, context.path)\n        },\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve(node, a, { path }) {\n          return node.children.map(id => getNodeAndSavePathDependency(id, path))\n        },\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const filteredNodes = node.children\n              .map(id => getNode(id))\n              .filter(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            // Add dependencies for the path\n            filteredNodes.forEach(n =>\n              createPageDependency({ path, nodeId: n.id })\n            )\n            return filteredNodes\n          },\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const childNode = node.children\n              .map(id => getNode(id))\n              .find(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            if (childNode) {\n              // Add dependencies for the path\n              createPageDependency({ path, nodeId: childNode.id })\n              return childNode\n            }\n            return null\n          },\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      allNodes: getNodes(),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      allNodes: getNodes(),\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: mergedFieldsFromPlugins,\n    })\n\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferedInputFields.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: filterFields,\n        resolve(a, args, context) {\n          const runSift = require(`./run-sift`)\n          const latestNodes = _.filter(\n            getNodes(),\n            n => n.internal.type === typeName\n          )\n          if (!_.isObject(args)) {\n            args = {}\n          }\n          return runSift({\n            args: { filter: { ...args } },\n            nodes: latestNodes,\n            path: context.path ? context.path : `LAYOUT___${context.id}`,\n            type: gqlType,\n          })\n        },\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  return processedTypes\n}\n"]}