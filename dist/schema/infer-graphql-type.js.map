{"version":3,"sources":["../../src/schema/infer-graphql-type.js"],"names":["inferObjectStructureFromNodes","GraphQLObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLUnionType","require","_","invariant","moment","mime","isRelative","isRelativeUrl","normalize","systemPath","oneLine","store","getNode","getNodes","joinPath","createPageDependency","createTypeName","createKey","extractFieldExamples","isEmptyObjectOrArray","ISO_8601_FORMAT","inferGraphQLType","exampleValue","selector","otherArgs","fieldName","split","pop","Array","isArray","headType","isObject","name","fields","inferredType","type","momentDate","utc","isValid","args","formatString","fromNow","description","difference","resolve","object","date","JSON","parse","stringify","format","diff","isInteger","inferFromMapping","value","mapping","fieldSelector","types","matchedTypes","filter","isEmpty","console","log","findNode","fieldValue","path","linkedType","linkedNode","find","n","internal","id","nodeId","nodeObjectType","node","a","b","map","findLinkedNode","linkedField","inferFromFieldName","uniqBy","v","key","validateLinkedNode","validateField","field","findNodeType","linkedNodes","forEach","i","length","f","join","resolveType","data","result","findRootNode","rootNode","whileCount","_PARENT","parent","undefined","shouldInferFile","nodes","looksLikeFile","isString","lookup","get","visit","current","fn","keys","Object","concat","proceed","isNormalInteger","str","test","isMatch","k","normalizedSelector","s","fullSelector","pathToOtherNode","dir","otherFileExists","some","absolutePath","inferFromUri","fileField","parentFileNode","fileLinkPath","linkedFileNode","EXCLUDE_KEYS","children","config","getState","isRoot","inferredFields","each","nextSelector","inferredField","includes"],"mappings":";;;;;;;;;;;;QAqgBgBA,6B,GAAAA,6B;;;;AApgBhB,MAAM;AACJC,mBADI;AAEJC,gBAFI;AAGJC,eAHI;AAIJC,cAJI;AAKJC,YALI;AAMJC,aANI;AAOJC;AAPI,IAQFC,QAAS,SAAT,CARJ;AASA,MAAMC,IAAID,QAAS,QAAT,CAAV;AACA,MAAME,YAAYF,QAAS,WAAT,CAAlB;AACA,MAAMG,SAASH,QAAS,QAAT,CAAf;AACA,MAAMI,OAAOJ,QAAS,MAAT,CAAb;AACA,MAAMK,aAAaL,QAAS,aAAT,CAAnB;AACA,MAAMM,gBAAgBN,QAAS,iBAAT,CAAtB;AACA,MAAMO,YAAYP,QAAS,gBAAT,CAAlB;AACA,MAAMQ,aAAaR,QAAS,MAAT,CAAnB;AACA,MAAM,EAAES,OAAF,KAAcT,QAAS,aAAT,CAApB;;AAEA,MAAM,EAAEU,KAAF,EAASC,OAAT,EAAkBC,QAAlB,KAA+BZ,QAAS,UAAT,CAArC;AACA,MAAM,EAAEa,QAAF,KAAeb,QAAS,eAAT,CAArB;AACA,MAAM,EAAEc,oBAAF,KAA2Bd,QAAS,sCAAT,CAAjC;AACA,MAAMe,iBAAiBf,QAAS,oBAAT,CAAvB;AACA,MAAMgB,YAAYhB,QAAS,cAAT,CAAlB;AACA,MAAM;AACJiB,sBADI;AAEJC;AAFI,IAGFlB,QAAS,mBAAT,CAHJ;;AAmBA,MAAMmB,kBAAkB,CACrB,MADqB,EAErB,SAFqB,EAGrB,YAHqB,EAIrB,UAJqB,EAKrB,gBALqB,EAMrB,mBANqB,EAOrB,kBAPqB,EAQrB,sBARqB,EASrB,oBATqB,EAUrB,0BAVqB,EAWrB,wBAXqB,EAYrB,YAZqB,EAarB,WAbqB,EAcrB,cAdqB,EAerB,YAfqB,EAgBrB,WAhBqB,EAiBrB,UAjBqB,CAAxB;;AAoBA,SAASC,gBAAT,OAI8B;AAAA,MAJJ;AACxBC,gBADwB;AAExBC;AAFwB,GAII;AAAA,MADzBC,SACyB;;AAC5B,MAAIF,gBAAgB,IAAhB,IAAwBH,qBAAqBG,YAArB,CAA5B,EAAgE;AAChE,MAAIG,YAAYF,SAASG,KAAT,CAAgB,GAAhB,EAAoBC,GAApB,EAAhB;;AAEA,MAAIC,MAAMC,OAAN,CAAcP,YAAd,CAAJ,EAAiC;AAC/BA,mBAAeA,aAAa,CAAb,CAAf;;AAEA,QAAIA,gBAAgB,IAApB,EAA0B;;AAE1B,QAAIQ,QAAJ;AACA;AACA;AACA,QAAI5B,EAAE6B,QAAF,CAAWT,YAAX,CAAJ,EAA8B;AAC5BQ,iBAAW,IAAIpC,iBAAJ,CAAsB;AAC/BsC,cAAMhB,eAAeS,SAAf,CADyB;AAE/BQ,gBAAQxC,yDACH+B,SADG;AAENF,sBAFM;AAGNC;AAHM;AAFuB,OAAtB,CAAX;AAQA;AACD,KAVD,MAUO;AACL,UAAIW,eAAeb,4CACdG,SADc;AAEjBF,oBAFiB;AAGjBC;AAHiB,SAAnB;AAKApB,gBACE+B,YADF,EAEG,2CAA0CZ,YAAa,EAF1D;;AAKAQ,iBAAWI,aAAaC,IAAxB;AACD;AACD,WAAO,EAAEA,MAAM,IAAIpC,WAAJ,CAAgB+B,QAAhB,CAAR,EAAP;AACD;;AAED;AACA;AACA,QAAMM,aAAahC,OAAOiC,GAAP,CAAWf,YAAX,EAAyBF,eAAzB,EAA0C,IAA1C,CAAnB;AACA,MAAIgB,WAAWE,OAAX,EAAJ,EAA0B;AACxB,WAAO;AACLH,YAAMvC,aADD;AAEL2C,YAAM;AACJC,sBAAc;AACZL,gBAAMvC;AADM,SADV;AAIJ6C,iBAAS;AACPN,gBAAMxC,cADC;AAEP+C,uBAAahC,OAAQ;;AAFd,SAJL;AASJiC,oBAAY;AACVR,gBAAMvC,aADI;AAEV8C,uBAAahC,OAAQ;;;;;AAFX;AATR,OAFD;AAoBLkC,cAAQC,MAAR,EAAgB,EAAEJ,OAAF,EAAWE,UAAX,EAAuBH,YAAvB,EAAhB,EAAuD;AACrD,YAAIM,IAAJ;AACA,YAAID,OAAOpB,SAAP,CAAJ,EAAuB;AACrBqB,iBAAOC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeJ,OAAOpB,SAAP,CAAf,CAAX,CAAP;AACD,SAFD,MAEO;AACL;AACD;AACD,YAAIe,YAAJ,EAAkB;AAChB,iBAAOpC,OAAOiC,GAAP,CAAWS,IAAX,EAAiB1B,eAAjB,EAAkC,IAAlC,EAAwC8B,MAAxC,CAA+CV,YAA/C,CAAP;AACD,SAFD,MAEO,IAAIC,OAAJ,EAAa;AAClB,iBAAOrC,OAAOiC,GAAP,CAAWS,IAAX,EAAiB1B,eAAjB,EAAkC,IAAlC,EAAwCqB,OAAxC,EAAP;AACD,SAFM,MAEA,IAAIE,UAAJ,EAAgB;AACrB,iBAAOvC,SAAS+C,IAAT,CACL/C,OAAOiC,GAAP,CAAWS,IAAX,EAAiB1B,eAAjB,EAAkC,IAAlC,CADK,EAELuB,UAFK,CAAP;AAID,SALM,MAKA;AACL,iBAAOG,IAAP;AACD;AACF;AAvCI,KAAP;AAyCD;;AAED,UAAQ,OAAOxB,YAAf;AACE,SAAM,SAAN;AACE,aAAO,EAAEa,MAAMxC,cAAR,EAAP;AACF,SAAM,QAAN;AACE,aAAO,EAAEwC,MAAMvC,aAAR,EAAP;AACF,SAAM,QAAN;AACE,aAAO;AACLuC,cAAM,IAAIzC,iBAAJ,CAAsB;AAC1BsC,gBAAMhB,eAAeS,SAAf,CADoB;AAE1BQ,kBAAQxC,yDACH+B,SADG;AAENF,wBAFM;AAGNC;AAHM;AAFkB,SAAtB;AADD,OAAP;AAUF,SAAM,QAAN;AACE,aAAOrB,EAAEkD,SAAF,CAAY9B,YAAZ,IACH,EAAEa,MAAMrC,UAAR,EADG,GAEH,EAAEqC,MAAMtC,YAAR,EAFJ;AAGF;AACE,aAAO,IAAP;AArBJ;AAuBD;;AAED,SAASwD,gBAAT,CACEC,KADF,EAEEC,OAFF,EAGEC,aAHF,EAIEC,KAJF,EAK6B;AAC3B,QAAMC,eAAeD,MAAME,MAAN,CACnBxB,QAAQA,KAAKH,IAAL,KAAcuB,QAAQC,aAAR,CADH,CAArB;AAGA,MAAItD,EAAE0D,OAAF,CAAUF,YAAV,CAAJ,EAA6B;AAC3BG,YAAQC,GAAR,CAAa,2CAA0CN,aAAc,GAArE;AACA;AACD;;AAED,QAAMO,WAAW,CAACC,UAAD,EAAaC,IAAb,KAAsB;AACrC,UAAMC,aAAaX,QAAQC,aAAR,CAAnB;AACA,UAAMW,aAAajE,EAAEkE,IAAF,CACjBvD,UADiB,EAEjBwD,KAAKA,EAAEC,QAAF,CAAWnC,IAAX,KAAoB+B,UAApB,IAAkCG,EAAEE,EAAF,KAASP,UAF/B,CAAnB;AAIA,QAAIG,UAAJ,EAAgB;AACdpD,2BAAqB,EAAEkD,IAAF,EAAQO,QAAQL,WAAWI,EAA3B,EAArB;AACA,aAAOJ,UAAP;AACD;AACF,GAVD;;AAYA,MAAIjE,EAAE2B,OAAF,CAAUyB,KAAV,CAAJ,EAAsB;AACpB,WAAO;AACLnB,YAAM,IAAIpC,WAAJ,CAAgB2D,aAAa,CAAb,EAAgBe,cAAhC,CADD;AAEL7B,eAAS,CAAC8B,IAAD,EAAOC,CAAP,EAAUC,CAAV,EAAa,EAAEnD,SAAF,EAAb,KAA+B;AACtC,cAAMuC,aAAaU,KAAKjD,SAAL,CAAnB;;AAEA,YAAIuC,UAAJ,EAAgB;AACd,iBAAOA,WAAWa,GAAX,CAAevB,SAASS,SAAST,KAAT,EAAgBsB,EAAEX,IAAlB,CAAxB,CAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AAVI,KAAP;AAYD;;AAED,SAAO;AACL9B,UAAMuB,aAAa,CAAb,EAAgBe,cADjB;AAEL7B,aAAS,CAAC8B,IAAD,EAAOC,CAAP,EAAUC,CAAV,EAAa,EAAEnD,SAAF,EAAb,KAA+B;AACtC,YAAMuC,aAAaU,KAAKjD,SAAL,CAAnB;;AAEA,UAAIuC,UAAJ,EAAgB;AACd,eAAOD,SAASC,UAAT,EAAqBY,EAAEX,IAAvB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;AAVI,GAAP;AAYD;;AAED,SAASa,cAAT,CAAwBxB,KAAxB,EAA+ByB,WAA/B,EAA4Cd,IAA5C,EAAkD;AAChD,MAAIE,UAAJ;AACA;AACA,MAAIY,WAAJ,EAAiB;AACfZ,iBAAatD,WAAWuD,IAAX,CAAgBC,KAAKA,EAAEU,WAAF,MAAmBzB,KAAxC,CAAb;AACA;AACD,GAHD,MAGO;AACLa,iBAAavD,QAAQ0C,KAAR,CAAb;AACD;;AAED,MAAIa,UAAJ,EAAgB;AACd,QAAIF,IAAJ,EAAU;AACRlD,2BAAqB,EAAEkD,IAAF,EAAQO,QAAQL,WAAWI,EAA3B,EAArB;AACD;AACD,WAAOJ,UAAP;AACD;AACF;;AAED,SAASa,kBAAT,CAA4B1B,KAA5B,EAAmC/B,QAAnC,EAA6CkC,KAA7C,EAA8E;AAC5E,MAAI5B,UAAU,KAAd;AACA,MAAI3B,EAAE2B,OAAF,CAAUyB,KAAV,CAAJ,EAAsB;AACpBzB,cAAU,IAAV;AACA;AACAyB,YAAQpD,EAAE+E,MAAF,CAAS3B,KAAT,EAAgB4B,KAAKtE,QAAQsE,CAAR,EAAWZ,QAAX,CAAoBnC,IAAzC,CAAR;AACD;;AAED,QAAMgD,MAAM5D,SAASG,KAAT,CAAgB,GAAhB,EAAoBC,GAApB,EAAZ;AACA,QAAM,IAAKoD,WAAL,IAAoBI,IAAIzD,KAAJ,CAAW,KAAX,CAA1B;;AAEA,QAAM0D,qBAAqBjB,cAAc;AACvChE,cACEgE,UADF,EAEEzD,OAAQ;oEACsDa,QAAS;kDAC3BwD,eAAgB,IAAI;2BAC3CzB,KAAM;OAL7B;AAQD,GATD;AAUA,QAAM+B,gBAAgB,CAAClB,UAAD,EAAamB,KAAb,KAAuB;AAC3CnF,cACEmF,KADF,EAEE5E,OAAQ;oEACsDa,QAAS;kDAC3B4C,WAAWG,QAAX,CACvCnC,IAAK;;OALZ;AASD,GAVD;;AAYA,QAAMoD,eAAeb,QACnBjB,MAAMW,IAAN,CAAWjC,QAAQA,KAAKH,IAAL,KAAc0C,KAAKJ,QAAL,CAAcnC,IAA/C,CADF;;AAGA,MAAIN,OAAJ,EAAa;AACX,UAAM2D,cAAclC,MAAMuB,GAAN,CAAUK,KAAKJ,eAAeI,CAAf,CAAf,CAApB;AACAM,gBAAYC,OAAZ,CAAoBf,QAAQU,mBAAmBV,IAAnB,CAA5B;AACA,UAAMzC,SAASuD,YAAYX,GAAZ,CAAgBH,QAAQa,aAAab,IAAb,CAAxB,CAAf;AACAzC,WAAOwD,OAAP,CAAe,CAACH,KAAD,EAAQI,CAAR,KAAcL,cAAcG,YAAYE,CAAZ,CAAd,EAA8BJ,KAA9B,CAA7B;;AAEA,QAAInD,IAAJ;AACA;AACA,QAAIF,OAAO0D,MAAP,GAAgB,CAApB,EAAuB;AACrBxD,aAAO,IAAInC,gBAAJ,CAAqB;AAC1BgC,cAAO,SAAQmD,GAAI,IAAGlD,OAAO4C,GAAP,CAAWe,KAAKA,EAAE5D,IAAlB,EAAwB6D,IAAxB,CAA8B,IAA9B,CAAmC,EAD/B;AAE1BnD,qBAAc,kCAAiCyC,GAAI,gBAAelD,OAC/D4C,GAD+D,CAC3De,KAAKA,EAAE5D,IADoD,EAE/D6D,IAF+D,CAEzD,IAFyD,CAEpD,GAJY;AAK1BpC,eAAOxB,OAAO4C,GAAP,CAAWe,KAAKA,EAAEnB,cAAlB,CALmB;AAM1BqB,qBAAaC,QACX9D,OAAOmC,IAAP,CAAYwB,KAAKA,EAAE5D,IAAF,IAAU+D,KAAKzB,QAAL,CAAcnC,IAAzC,EAA+CsC;AAPvB,OAArB,CAAP;AASD,KAVD,MAUO;AACLtC,aAAOF,OAAO,CAAP,EAAUwC,cAAjB;AACD;;AAED,WAAO;AACLtC,YAAM,IAAIpC,WAAJ,CAAgBoC,IAAhB,CADD;AAELS,eAAS,CAAC8B,IAAD,EAAOC,CAAP,EAAUC,IAAI,EAAd,KAAqB;AAC5B,YAAIZ,aAAaU,KAAKS,GAAL,CAAjB;AACA,YAAInB,UAAJ,EAAgB;AACd,iBAAOA,WAAWa,GAAX,CAAevB,SACpBwB,eAAexB,KAAf,EAAsByB,WAAtB,EAAmCH,EAAEX,IAArC,CADK,CAAP;AAGD,SAJD,MAIO;AACL,iBAAO,IAAP;AACD;AACF;AAXI,KAAP;AAaD;;AAED,QAAME,aAAaW,eAAexB,KAAf,EAAsByB,WAAtB,CAAnB;AACAK,qBAAmBjB,UAAnB;AACA,QAAMmB,QAAQC,aAAapB,UAAb,CAAd;AACAkB,gBAAclB,UAAd,EAA0BmB,KAA1B;AACA,SAAO;AACLnD,UAAMmD,MAAMb,cADP;AAEL7B,aAAS,CAAC8B,IAAD,EAAOC,CAAP,EAAUC,IAAI,EAAd,KAAqB;AAC5B,UAAIZ,aAAaU,KAAKS,GAAL,CAAjB;AACA,UAAInB,UAAJ,EAAgB;AACd,cAAMgC,SAASlB,eAAed,UAAf,EAA2Be,WAA3B,EAAwCH,EAAEX,IAA1C,CAAf;AACA,eAAO+B,MAAP;AACD,OAHD,MAGO;AACL,eAAO,IAAP;AACD;AACF;AAVI,GAAP;AAYD;;AAED,SAASC,YAAT,CAAsBvB,IAAtB,EAA4B;AAC1B;AACA,MAAIwB,WAAWxB,IAAf;AACA,MAAIyB,aAAa,CAAjB;AACA,SACE,CAACD,SAASE,OAAT,IAAoBF,SAASG,MAA9B,MACCzF,QAAQsF,SAASG,MAAjB,MAA6BC,SAA7B,IAA0C1F,QAAQsF,SAASE,OAAjB,CAD3C,KAEAD,aAAa,GAHf,EAIE;AACA,QAAID,SAASE,OAAb,EAAsB;AACpBF,iBAAWtF,QAAQsF,SAASE,OAAjB,CAAX;AACD,KAFD,MAEO;AACLF,iBAAWtF,QAAQsF,SAASG,MAAjB,CAAX;AACD;AACDF,kBAAc,CAAd;AACA,QAAIA,aAAa,GAAjB,EAAsB;AACpBtC,cAAQC,GAAR,CACG,+DADH,EAEEoC,QAFF;AAID;AACF;;AAED,SAAOA,QAAP;AACD;;AAED,SAASK,eAAT,CAAyBC,KAAzB,EAAgCrB,GAAhC,EAAqC7B,KAArC,EAA4C;AAC1C,QAAMmD,gBACJvG,EAAEwG,QAAF,CAAWpD,KAAX,KACAjD,KAAKsG,MAAL,CAAYrD,KAAZ,MAAwB,0BADxB;AAEA;AACAjD,OAAKsG,MAAL,CAAYrD,KAAZ,MAAwB,0BAHxB,IAIAhD,WAAWgD,KAAX,CAJA,IAKA/C,cAAc+C,KAAd,CANF;;AAQA,MAAI,CAACmD,aAAL,EAAoB;AAClB,WAAO,KAAP;AACD;;AAED;AACA,MAAI/B,OAAO8B,MAAMpC,IAAN,CAAWC,KAAKnE,EAAE0G,GAAF,CAAMvC,CAAN,EAASc,GAAT,MAAkB7B,KAAlC,CAAX;;AAEA,MAAI,CAACoB,IAAL,EAAW;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAMmC,QAAQ,CAACC,OAAD,EAAUvF,WAAW,EAArB,EAAyBwF,EAAzB,KAAgC;AAC5C,WAAK,IAAIrB,IAAI,CAAR,EAAWsB,OAAOC,OAAOD,IAAP,CAAYF,OAAZ,CAAvB,EAA6CpB,IAAIsB,KAAKrB,MAAtD,EAA8DD,GAA9D,EAAmE;AACjE,cAAMP,MAAM6B,KAAKtB,CAAL,CAAZ;AACA,cAAMpC,QAAQwD,QAAQ3B,GAAR,CAAd;;AAEA,YAAI7B,UAAUgD,SAAV,IAAuBhD,UAAU,IAArC,EAA2C;;AAE3C,YAAI,OAAOA,KAAP,KAAkB,QAAlB,IAA6B,OAAOA,KAAP,KAAkB,UAAnD,EAA8D;AAC5DuD,gBAAMC,QAAQ3B,GAAR,CAAN,EAAoB5D,SAAS2F,MAAT,CAAgB,CAAC/B,GAAD,CAAhB,CAApB,EAA4C4B,EAA5C;AACA;AACD;;AAED,YAAII,UAAUJ,GAAGD,QAAQ3B,GAAR,CAAH,EAAiBA,GAAjB,EAAsB5D,QAAtB,EAAgCuF,OAAhC,CAAd;;AAEA,YAAIK,YAAY,KAAhB,EAAuB;AACrB;AACD;AACF;AACF,KAlBD;;AAoBA,UAAMC,kBAAkBC,OAAO,oBAAoBC,IAApB,CAAyBD,GAAzB,CAA/B;;AAEA3C,WAAO8B,MAAMpC,IAAN,CAAWC,KAAK;AACrB,UAAIkD,UAAU,KAAd;AACAV,YAAMxC,CAAN,EAAS,EAAT,EAAa,CAACa,CAAD,EAAIsC,CAAJ,EAAOjG,QAAP,EAAiB8E,MAAjB,KAA4B;AACvC,YAAInB,MAAM5B,KAAV,EAAiB;AACf;AACA;AACA,gBAAMmE,qBAAqBlG,SACxBsD,GADwB,CACpB6C,KAAMN,gBAAgBM,CAAhB,IAAsB,EAAtB,GAA0BA,CADZ,EAExB/D,MAFwB,CAEjB+D,KAAKA,MAAO,EAFK,CAA3B;AAGA,gBAAMC,eAAgB,GAAEF,mBAAmB5B,IAAnB,CAAyB,GAAzB,CAA6B,IAAG2B,CAAE,EAA1D;AACA,cAAIG,iBAAiBxC,GAArB,EAA0B;AACxBoC,sBAAU,IAAV;AACA,mBAAO,KAAP;AACD;AACF;;AAED;AACA,eAAO,IAAP;AACD,OAhBD;;AAkBA,aAAOA,OAAP;AACD,KArBM,CAAP;;AAuBA;AACA,QAAI,CAAC7C,IAAL,EAAW;AACT,aAAO,KAAP;AACD;AACF;;AAED,QAAMwB,WAAWD,aAAavB,IAAb,CAAjB;;AAEA;AACA;AACA,MAAIwB,SAAS5B,QAAT,CAAkBnC,IAAlB,KAA4B,MAAhC,EAAuC;AACrC,WAAO,KAAP;AACD;;AAED,QAAMyF,kBAAkBpH,UAAUM,SAASoF,SAAS2B,GAAlB,EAAuBvE,KAAvB,CAAV,CAAxB;AACA,QAAMwE,kBAAkBjH,WAAWkH,IAAX,CACtB1D,KAAKA,EAAE2D,YAAF,KAAmBJ,eADF,CAAxB;AAGA,SAAOE,eAAP;AACD;;AAED;AACA;AACA,SAASG,YAAT,CAAsB9C,GAAtB,EAA2B1B,KAA3B,EAAkC;AAChC,QAAMyE,YAAYzE,MAAMW,IAAN,CAAWjC,QAAQA,KAAKH,IAAL,KAAe,MAAlC,CAAlB;;AAEA,MAAI,CAACkG,SAAL,EAAgB;;AAEhB,SAAO;AACL/F,UAAM+F,UAAUzD,cADX;AAEL7B,aAAS,CAAC8B,IAAD,EAAOC,CAAP,EAAU,EAAEV,IAAF,EAAV,KAAuB;AAC9B,YAAMD,aAAaU,KAAKS,GAAL,CAAnB;;AAEA,UAAI,CAACnB,UAAL,EAAiB;AACf,eAAO,IAAP;AACD;;AAED;AACA;AACA,YAAMmE,iBAAiBlC,aAAavB,IAAb,CAAvB;;AAEA;AACA;AACA,YAAM0D,eAAe5H,UACnBC,WAAWmC,OAAX,CAAmBuF,eAAeN,GAAlC,EAAuC7D,UAAvC,CADmB,CAArB;;AAIA;AACA,YAAMqE,iBAAiBnI,EAAEkE,IAAF,CACrBvD,UADqB,EAErBwD,KAAKA,EAAEC,QAAF,CAAWnC,IAAX,KAAqB,MAArB,IAA8BkC,EAAE2D,YAAF,KAAmBI,YAFjC,CAAvB;;AAKA,UAAIC,cAAJ,EAAoB;AAClBtH,6BAAqB;AACnBkD,cADmB;AAEnBO,kBAAQ6D,eAAe9D;AAFJ,SAArB;AAIA,eAAO8D,cAAP;AACD,OAND,MAMO;AACL,eAAO,IAAP;AACD;AACF;AAlCI,GAAP;AAoCD;;AASD,MAAMC,eAAe;AACnB/D,MAAI,CADe;AAEnB8B,UAAQ,CAFW;AAGnBkC,YAAU;;AAGZ;AACA;AAPqB,CAArB,CAQO,SAAS9I,6BAAT,CAAuC;AAC5C+G,OAD4C;AAE5C/C,OAF4C;AAG5ClC,UAH4C;AAI5CD,iBAAeJ,qBAAqBsF,KAArB;AAJ6B,CAAvC,EAK2C;AAChD,QAAMgC,SAAS7H,MAAM8H,QAAN,GAAiBD,MAAhC;AACA,QAAME,SAAS,CAACnH,QAAhB;AACA,QAAMgC,UAAUiF,UAAUA,OAAOjF,OAAjC;;AAEA;AACAiD,UAAQA,MAAM3B,GAAN,CAAUR,KAAMA,EAAEC,QAAF,GAAaD,CAAb,8BAAsBA,CAAtB,IAAyBC,UAAU,EAAnC,GAAhB,CAAR;;AAEA,QAAMqE,iBAAiB,EAAvB;AACAzI,IAAE0I,IAAF,CAAOtH,YAAP,EAAqB,CAACgC,KAAD,EAAQ6B,GAAR,KAAgB;AACnC;AACA;AACA,QAAIuD,UAAUJ,aAAanD,GAAb,CAAd,EAAiC;;AAEjC;AACA;AACA,UAAM0D,eAAetH,WAAY,GAAEA,QAAS,IAAG4D,GAAI,EAA9B,GAAkCA,GAAvD;AACA,UAAM3B,gBAAiB,GAAEgD,MAAM,CAAN,EAASlC,QAAT,CAAkBnC,IAAK,IAAG0G,YAAa,EAAhE;;AAEA,QAAIpH,YAAY0D,GAAhB;AACA,QAAI2D,aAAJ;;AAEA;AACA;AACA,QAAIvF,WAAWrD,EAAE6I,QAAF,CAAW9B,OAAOD,IAAP,CAAYzD,OAAZ,CAAX,EAAiCC,aAAjC,CAAf,EAAgE;AAC9DsF,sBAAgBzF,iBAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,aAAjC,EAAgDC,KAAhD,CAAhB;;AAEA;AACA;AACD,KALD,MAKO,IAAIvD,EAAE6I,QAAF,CAAW5D,GAAX,EAAiB,SAAjB,CAAJ,EAAgC;AACrC,OAAC,CAAC1D,SAAD,IAAc0D,IAAIzD,KAAJ,CAAW,KAAX,CAAd;AACDoH,sBAAgB9D,mBAAmB1B,KAAnB,EAA0BuF,YAA1B,EAAwCpF,KAAxC,CAAhB;;AAEA;AACD,KALM,MAKA,IACL+C,MAAM,CAAN,EAASlC,QAAT,CAAkBnC,IAAlB,KAA4B,MAA5B,IACAjC,EAAEwG,QAAF,CAAWpD,KAAX,CADA,IAEAiD,gBAAgBC,KAAhB,EAAuBqC,YAAvB,EAAqCvF,KAArC,CAHK,EAIL;AACAwF,sBAAgBb,aAAa9C,GAAb,EAAkB1B,KAAlB,CAAhB;AACD;;AAED;AACA,QAAI,CAACqF,aAAL,EAAoB;AAClBA,sBAAgBzH,iBAAiB;AAC/BmF,aAD+B;AAE/B/C,aAF+B;AAG/BnC,sBAAcgC,KAHiB;AAI/B/B,kBAAUA,WAAY,GAAEA,QAAS,IAAG4D,GAAI,EAA9B,GAAkCA;AAJb,OAAjB,CAAhB;AAMD;;AAED,QAAI,CAAC2D,aAAL,EAAoB;;AAEpB;AACAH,mBAAe1H,UAAUQ,SAAV,CAAf,IAAuCqH,aAAvC;AACD,GA/CD;;AAiDA,SAAOH,cAAP;AACD","file":"infer-graphql-type.js","sourcesContent":["// @flow\nconst {\n  GraphQLObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLUnionType,\n} = require(`graphql`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst moment = require(`moment`)\nconst mime = require(`mime`)\nconst isRelative = require(`is-relative`)\nconst isRelativeUrl = require(`is-relative-url`)\nconst normalize = require(`normalize-path`)\nconst systemPath = require(`path`)\nconst { oneLine } = require(`common-tags`)\n\nconst { store, getNode, getNodes } = require(`../redux`)\nconst { joinPath } = require(`../utils/path`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  extractFieldExamples,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\n\nimport type { GraphQLOutputType } from \"graphql\"\nimport type {\n  GraphQLFieldConfig,\n  GraphQLFieldConfigMap,\n} from \"graphql/type/definition\"\n\nexport type ProcessedNodeType = {\n  name: string,\n  nodes: any[],\n  node: GraphQLFieldConfig<*, *>,\n  fieldsFromPlugins: any,\n  nodeObjectType: GraphQLOutputType,\n}\n\nconst ISO_8601_FORMAT = [\n  `YYYY`,\n  `YYYY-MM`,\n  `YYYY-MM-DD`,\n  `YYYYMMDD`,\n  `YYYY-MM-DDTHHZ`,\n  `YYYY-MM-DDTHH:mmZ`,\n  `YYYY-MM-DDTHHmmZ`,\n  `YYYY-MM-DDTHH:mm:ssZ`,\n  `YYYY-MM-DDTHHmmssZ`,\n  `YYYY-MM-DDTHH:mm:ss.SSSZ`,\n  `YYYY-MM-DDTHHmmss.SSSZ`,\n  `YYYY-[W]WW`,\n  `YYYY[W]WW`,\n  `YYYY-[W]WW-E`,\n  `YYYY[W]WWE`,\n  `YYYY-DDDD`,\n  `YYYYDDDD`,\n]\n\nfunction inferGraphQLType({\n  exampleValue,\n  selector,\n  ...otherArgs\n}): ?GraphQLFieldConfig<*, *> {\n  if (exampleValue == null || isEmptyObjectOrArray(exampleValue)) return\n  let fieldName = selector.split(`.`).pop()\n\n  if (Array.isArray(exampleValue)) {\n    exampleValue = exampleValue[0]\n\n    if (exampleValue == null) return\n\n    let headType\n    // If the array contains objects, than treat them as \"nodes\"\n    // and create an object type.\n    if (_.isObject(exampleValue)) {\n      headType = new GraphQLObjectType({\n        name: createTypeName(fieldName),\n        fields: inferObjectStructureFromNodes({\n          ...otherArgs,\n          exampleValue,\n          selector,\n        }),\n      })\n      // Else if the values are simple values, just infer their type.\n    } else {\n      let inferredType = inferGraphQLType({\n        ...otherArgs,\n        exampleValue,\n        selector,\n      })\n      invariant(\n        inferredType,\n        `Could not infer graphQL type for value: ${exampleValue}`\n      )\n\n      headType = inferredType.type\n    }\n    return { type: new GraphQLList(headType) }\n  }\n\n  // Check if this is a date.\n  // All the allowed ISO 8601 date-time formats used.\n  const momentDate = moment.utc(exampleValue, ISO_8601_FORMAT, true)\n  if (momentDate.isValid()) {\n    return {\n      type: GraphQLString,\n      args: {\n        formatString: {\n          type: GraphQLString,\n        },\n        fromNow: {\n          type: GraphQLBoolean,\n          description: oneLine`\n            Returns a string generated with Moment.js' fromNow function`,\n        },\n        difference: {\n          type: GraphQLString,\n          description: oneLine`\n            Returns the difference between this date and the current time.\n            Defaults to miliseconds but you can also pass in as the\n            measurement years, months, weeks, days, hours, minutes,\n            and seconds.`,\n        },\n      },\n      resolve(object, { fromNow, difference, formatString }) {\n        let date\n        if (object[fieldName]) {\n          date = JSON.parse(JSON.stringify(object[fieldName]))\n        } else {\n          return\n        }\n        if (formatString) {\n          return moment.utc(date, ISO_8601_FORMAT, true).format(formatString)\n        } else if (fromNow) {\n          return moment.utc(date, ISO_8601_FORMAT, true).fromNow()\n        } else if (difference) {\n          return moment().diff(\n            moment.utc(date, ISO_8601_FORMAT, true),\n            difference\n          )\n        } else {\n          return date\n        }\n      },\n    }\n  }\n\n  switch (typeof exampleValue) {\n    case `boolean`:\n      return { type: GraphQLBoolean }\n    case `string`:\n      return { type: GraphQLString }\n    case `object`:\n      return {\n        type: new GraphQLObjectType({\n          name: createTypeName(fieldName),\n          fields: inferObjectStructureFromNodes({\n            ...otherArgs,\n            exampleValue,\n            selector,\n          }),\n        }),\n      }\n    case `number`:\n      return _.isInteger(exampleValue)\n        ? { type: GraphQLInt }\n        : { type: GraphQLFloat }\n    default:\n      return null\n  }\n}\n\nfunction inferFromMapping(\n  value,\n  mapping,\n  fieldSelector,\n  types\n): ?GraphQLFieldConfig<*, *> {\n  const matchedTypes = types.filter(\n    type => type.name === mapping[fieldSelector]\n  )\n  if (_.isEmpty(matchedTypes)) {\n    console.log(`Couldn't find a matching node type for \"${fieldSelector}\"`)\n    return\n  }\n\n  const findNode = (fieldValue, path) => {\n    const linkedType = mapping[fieldSelector]\n    const linkedNode = _.find(\n      getNodes(),\n      n => n.internal.type === linkedType && n.id === fieldValue\n    )\n    if (linkedNode) {\n      createPageDependency({ path, nodeId: linkedNode.id })\n      return linkedNode\n    }\n  }\n\n  if (_.isArray(value)) {\n    return {\n      type: new GraphQLList(matchedTypes[0].nodeObjectType),\n      resolve: (node, a, b, { fieldName }) => {\n        const fieldValue = node[fieldName]\n\n        if (fieldValue) {\n          return fieldValue.map(value => findNode(value, b.path))\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  return {\n    type: matchedTypes[0].nodeObjectType,\n    resolve: (node, a, b, { fieldName }) => {\n      const fieldValue = node[fieldName]\n\n      if (fieldValue) {\n        return findNode(fieldValue, b.path)\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nfunction findLinkedNode(value, linkedField, path) {\n  let linkedNode\n  // If the field doesn't link to the id, use that for searching.\n  if (linkedField) {\n    linkedNode = getNodes().find(n => n[linkedField] === value)\n    // Else the field is linking to the node's id, the default.\n  } else {\n    linkedNode = getNode(value)\n  }\n\n  if (linkedNode) {\n    if (path) {\n      createPageDependency({ path, nodeId: linkedNode.id })\n    }\n    return linkedNode\n  }\n}\n\nfunction inferFromFieldName(value, selector, types): GraphQLFieldConfig<*, *> {\n  let isArray = false\n  if (_.isArray(value)) {\n    isArray = true\n    // Reduce values to nodes with unique types.\n    value = _.uniqBy(value, v => getNode(v).internal.type)\n  }\n\n  const key = selector.split(`.`).pop()\n  const [, , linkedField] = key.split(`___`)\n\n  const validateLinkedNode = linkedNode => {\n    invariant(\n      linkedNode,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding node with the ${linkedField || `id`}\n        field matching: \"${value}\"\n      `\n    )\n  }\n  const validateField = (linkedNode, field) => {\n    invariant(\n      field,\n      oneLine`\n        Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n        There is no corresponding GraphQL type \"${linkedNode.internal\n          .type}\" available\n        to link to this node.\n      `\n    )\n  }\n\n  const findNodeType = node =>\n    types.find(type => type.name === node.internal.type)\n\n  if (isArray) {\n    const linkedNodes = value.map(v => findLinkedNode(v))\n    linkedNodes.forEach(node => validateLinkedNode(node))\n    const fields = linkedNodes.map(node => findNodeType(node))\n    fields.forEach((field, i) => validateField(linkedNodes[i], field))\n\n    let type\n    // If there's more than one type, we'll create a union type.\n    if (fields.length > 1) {\n      type = new GraphQLUnionType({\n        name: `Union_${key}_${fields.map(f => f.name).join(`__`)}`,\n        description: `Union interface for the field \"${key}\" for types [${fields\n          .map(f => f.name)\n          .join(`, `)}]`,\n        types: fields.map(f => f.nodeObjectType),\n        resolveType: data =>\n          fields.find(f => f.name == data.internal.type).nodeObjectType,\n      })\n    } else {\n      type = fields[0].nodeObjectType\n    }\n\n    return {\n      type: new GraphQLList(type),\n      resolve: (node, a, b = {}) => {\n        let fieldValue = node[key]\n        if (fieldValue) {\n          return fieldValue.map(value =>\n            findLinkedNode(value, linkedField, b.path)\n          )\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  const linkedNode = findLinkedNode(value, linkedField)\n  validateLinkedNode(linkedNode)\n  const field = findNodeType(linkedNode)\n  validateField(linkedNode, field)\n  return {\n    type: field.nodeObjectType,\n    resolve: (node, a, b = {}) => {\n      let fieldValue = node[key]\n      if (fieldValue) {\n        const result = findLinkedNode(fieldValue, linkedField, b.path)\n        return result\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nfunction findRootNode(node) {\n  // Find the root node.\n  let rootNode = node\n  let whileCount = 0\n  while (\n    (rootNode._PARENT || rootNode.parent) &&\n    (getNode(rootNode.parent) !== undefined || getNode(rootNode._PARENT)) &&\n    whileCount < 101\n  ) {\n    if (rootNode._PARENT) {\n      rootNode = getNode(rootNode._PARENT)\n    } else {\n      rootNode = getNode(rootNode.parent)\n    }\n    whileCount += 1\n    if (whileCount > 100) {\n      console.log(\n        `It looks like you have a node that's set its parent as itself`,\n        rootNode\n      )\n    }\n  }\n\n  return rootNode\n}\n\nfunction shouldInferFile(nodes, key, value) {\n  const looksLikeFile =\n    _.isString(value) &&\n    mime.lookup(value) !== `application/octet-stream` &&\n    // domains ending with .com\n    mime.lookup(value) !== `application/x-msdownload` &&\n    isRelative(value) &&\n    isRelativeUrl(value)\n\n  if (!looksLikeFile) {\n    return false\n  }\n\n  // Find the node used for this example.\n  let node = nodes.find(n => _.get(n, key) === value)\n\n  if (!node) {\n    // Try another search as our \"key\" isn't always correct e.g.\n    // it doesn't support arrays so the right key could be \"a.b[0].c\" but\n    // this function will get \"a.b.c\".\n    //\n    // We loop through every value of nodes until we find\n    // a match.\n    const visit = (current, selector = [], fn) => {\n      for (let i = 0, keys = Object.keys(current); i < keys.length; i++) {\n        const key = keys[i]\n        const value = current[key]\n\n        if (value === undefined || value === null) continue\n\n        if (typeof value === `object` || typeof value === `function`) {\n          visit(current[key], selector.concat([key]), fn)\n          continue\n        }\n\n        let proceed = fn(current[key], key, selector, current)\n\n        if (proceed === false) {\n          break\n        }\n      }\n    }\n\n    const isNormalInteger = str => /^\\+?(0|[1-9]\\d*)$/.test(str)\n\n    node = nodes.find(n => {\n      let isMatch = false\n      visit(n, [], (v, k, selector, parent) => {\n        if (v === value) {\n          // Remove integers as they're for arrays, which our passed\n          // in object path doesn't have.\n          const normalizedSelector = selector\n            .map(s => (isNormalInteger(s) ? `` : s))\n            .filter(s => s !== ``)\n          const fullSelector = `${normalizedSelector.join(`.`)}.${k}`\n          if (fullSelector === key) {\n            isMatch = true\n            return false\n          }\n        }\n\n        // Not a match so we continue\n        return true\n      })\n\n      return isMatch\n    })\n\n    // Still no node.\n    if (!node) {\n      return false\n    }\n  }\n\n  const rootNode = findRootNode(node)\n\n  // Only nodes transformed (ultimately) from a File\n  // can link to another File.\n  if (rootNode.internal.type !== `File`) {\n    return false\n  }\n\n  const pathToOtherNode = normalize(joinPath(rootNode.dir, value))\n  const otherFileExists = getNodes().some(\n    n => n.absolutePath === pathToOtherNode\n  )\n  return otherFileExists\n}\n\n// Look for fields that are pointing at a file — if the field has a known\n// extension then assume it should be a file field.\nfunction inferFromUri(key, types) {\n  const fileField = types.find(type => type.name === `File`)\n\n  if (!fileField) return\n\n  return {\n    type: fileField.nodeObjectType,\n    resolve: (node, a, { path }) => {\n      const fieldValue = node[key]\n\n      if (!fieldValue) {\n        return null\n      }\n\n      // Find File node for this node (we assume the node is something\n      // like markdown which would be a child node of a File node).\n      const parentFileNode = findRootNode(node)\n\n      // Use the parent File node to create the absolute path to\n      // the linked file.\n      const fileLinkPath = normalize(\n        systemPath.resolve(parentFileNode.dir, fieldValue)\n      )\n\n      // Use that path to find the linked File node.\n      const linkedFileNode = _.find(\n        getNodes(),\n        n => n.internal.type === `File` && n.absolutePath === fileLinkPath\n      )\n\n      if (linkedFileNode) {\n        createPageDependency({\n          path,\n          nodeId: linkedFileNode.id,\n        })\n        return linkedFileNode\n      } else {\n        return null\n      }\n    },\n  }\n}\n\ntype inferTypeOptions = {\n  nodes: Object[],\n  types: ProcessedNodeType[],\n  selector?: string,\n  exampleValue?: Object,\n}\n\nconst EXCLUDE_KEYS = {\n  id: 1,\n  parent: 1,\n  children: 1,\n}\n\n// Call this for the top level node + recursively for each sub-object.\n// E.g. This gets called for Markdown and then for its frontmatter subobject.\nexport function inferObjectStructureFromNodes({\n  nodes,\n  types,\n  selector,\n  exampleValue = extractFieldExamples(nodes),\n}: inferTypeOptions): GraphQLFieldConfigMap<*, *> {\n  const config = store.getState().config\n  const isRoot = !selector\n  const mapping = config && config.mapping\n\n  // Ensure nodes have internal key with object.\n  nodes = nodes.map(n => (n.internal ? n : { ...n, internal: {} }))\n\n  const inferredFields = {}\n  _.each(exampleValue, (value, key) => {\n    // Remove fields common to the top-level of all nodes.  We add these\n    // elsewhere so don't need to infer their type.\n    if (isRoot && EXCLUDE_KEYS[key]) return\n\n    // Several checks to see if a field is pointing to custom type\n    // before we try automatic inference.\n    const nextSelector = selector ? `${selector}.${key}` : key\n    const fieldSelector = `${nodes[0].internal.type}.${nextSelector}`\n\n    let fieldName = key\n    let inferredField\n\n    // First check for manual field => type mappings in the site's\n    // gatsby-config.js\n    if (mapping && _.includes(Object.keys(mapping), fieldSelector)) {\n      inferredField = inferFromMapping(value, mapping, fieldSelector, types)\n\n      // Second if the field has a suffix of ___node. We use then the value\n      // (a node id) to find the node and use that node's type as the field\n    } else if (_.includes(key, `___NODE`)) {\n      ;[fieldName] = key.split(`___`)\n      inferredField = inferFromFieldName(value, nextSelector, types)\n\n      // Third if the field is pointing to a file (from another file).\n    } else if (\n      nodes[0].internal.type !== `File` &&\n      _.isString(value) &&\n      shouldInferFile(nodes, nextSelector, value)\n    ) {\n      inferredField = inferFromUri(key, types)\n    }\n\n    // Finally our automatic inference of field value type.\n    if (!inferredField) {\n      inferredField = inferGraphQLType({\n        nodes,\n        types,\n        exampleValue: value,\n        selector: selector ? `${selector}.${key}` : key,\n      })\n    }\n\n    if (!inferredField) return\n\n    // Replace unsupported values\n    inferredFields[createKey(fieldName)] = inferredField\n  })\n\n  return inferredFields\n}\n"]}