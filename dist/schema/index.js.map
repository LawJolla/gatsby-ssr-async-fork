{"version":3,"sources":["../../src/schema/index.js"],"names":["_","require","GraphQLSchema","GraphQLObjectType","buildNodeTypes","buildNodeConnections","store","invariant","module","exports","console","time","typesGQL","connections","values","nodes","mapValues","isEmpty","schema","query","name","fields","dispatch","type","payload"],"mappings":";;;;;;;;AACA,MAAMA,IAAIC,QAAS,QAAT,CAAV;AACA,MAAM,EAAEC,aAAF,EAAiBC,iBAAjB,KAAuCF,QAAS,SAAT,CAA7C;;AAEA,MAAMG,iBAAiBH,QAAS,oBAAT,CAAvB;AACA,MAAMI,uBAAuBJ,QAAS,0BAAT,CAA7B;AACA,MAAM,EAAEK,KAAF,KAAYL,QAAS,UAAT,CAAlB;AACA,MAAMM,YAAYN,QAAS,WAAT,CAAlB;;AAEAO,OAAOC,OAAP,GAAiB,YAAY;AAC3BC,UAAQC,IAAR,CAAc,iBAAd;;AAEA,QAAMC,WAAW,MAAMR,gBAAvB;AACA,QAAMS,cAAcR,qBAAqBL,EAAEc,MAAF,CAASF,QAAT,CAArB,CAApB;;AAEA;AACA,QAAMG,QAAQf,EAAEgB,SAAF,CAAYJ,QAAZ,EAAuB,MAAvB,CAAd;;AAEAL,YAAU,CAACP,EAAEiB,OAAF,CAAUF,KAAV,CAAX,EAA8B,kCAA9B;AACAR,YAAU,CAACP,EAAEiB,OAAF,CAAUJ,WAAV,CAAX,EAAoC,wCAApC;;AAEA,QAAMK,SAAS,IAAIhB,aAAJ,CAAkB;AAC/BiB,WAAO,IAAIhB,iBAAJ,CAAsB;AAC3BiB,YAAO,eADoB;AAE3BC,yCAAaR,WAAb,EAA6BE,KAA7B;AAF2B,KAAtB;AADwB,GAAlB,CAAf;;AAOAT,QAAMgB,QAAN,CAAe;AACbC,UAAO,YADM;AAEbC,aAASN;AAFI,GAAf;AAID,CAvBD","file":"index.js","sourcesContent":["/* @flow */\nconst _ = require(`lodash`)\nconst { GraphQLSchema, GraphQLObjectType } = require(`graphql`)\n\nconst buildNodeTypes = require(`./build-node-types`)\nconst buildNodeConnections = require(`./build-node-connections`)\nconst { store } = require(`../redux`)\nconst invariant = require(`invariant`)\n\nmodule.exports = async () => {\n  console.time(`building schema`)\n\n  const typesGQL = await buildNodeTypes()\n  const connections = buildNodeConnections(_.values(typesGQL))\n\n  // Pull off just the graphql node from each type object.\n  const nodes = _.mapValues(typesGQL, `node`)\n\n  invariant(!_.isEmpty(nodes), `There are no available GQL nodes`)\n  invariant(!_.isEmpty(connections), `There are no available GQL connections`)\n\n  const schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: `RootQueryType`,\n      fields: { ...connections, ...nodes },\n    }),\n  })\n\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n}\n"]}