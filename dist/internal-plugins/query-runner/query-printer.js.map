{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-printer.js"],"names":["forEachObject","require","forEach","invariant","DEFAULT_HANDLE_KEY","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","INDENT","print","node","kind","name","String","type","printFragmentArgumentDefinitions","argumentDefinitions","printDirectives","directives","printSelections","operation","printArgumentDefinitions","indent","parentCondition","selections","printed","map","selection","printSelection","join","length","str","alias","printArguments","args","printHandles","typeCondition","toString","printFragmentArguments","value","printValue","condition","condStr","passingValue","subSelections","sel","def","defaultValue","printLiteral","push","field","handles","handle","key","filters","JSON","stringify","sort","directive","printedArgs","arg","printedValue","variableName","pairs","fields","typeFields","getFields","innerValue","filter","Boolean","innerType","ofType","items","i","Array","isArray","itemType","item","val","module","exports"],"mappings":"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","file":"query-printer.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\nconst forEachObject = require(`lodash`).forEach\nconst invariant = require(`invariant`)\n\nconst DEFAULT_HANDLE_KEY = ``\nconst {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n} = require(`graphql`)\n\nimport type {\n  Argument,\n  ArgumentDefinition,\n  ArgumentValue,\n  Directive,\n  Field,\n  Fragment,\n  LocalArgumentDefinition,\n  Node,\n  Root,\n  Selection,\n} from \"relay-compiler/lib/RelayIR\"\nimport type { GraphQLInputType } from \"graphql\"\n\nconst INDENT = `  `\n\n/**\n * Converts a Relay IR node into a GraphQL string. Custom Relay\n * extensions (directives) are not supported; to print fragments with\n * variables or fragment spreads with arguments, transform the node\n * prior to printing.\n */\nfunction print(node: Root | Fragment): string {\n  if (node.kind === `Fragment`) {\n    return (\n      `fragment ${node.name} on ${String(node.type)}` +\n      printFragmentArgumentDefinitions(node.argumentDefinitions) +\n      printDirectives(node.directives) +\n      printSelections(node, ``) +\n      `\\n`\n    )\n  } else if (node.kind === `Root`) {\n    return (\n      `${node.operation} ${node.name}` +\n      printArgumentDefinitions(node.argumentDefinitions) +\n      printDirectives(node.directives) +\n      printSelections(node, ``) +\n      `\\n`\n    )\n  } else {\n    invariant(false, `RelayPrinter: Unsupported IR node \\`%s\\`.`, node.kind)\n  }\n}\n\nfunction printSelections(\n  node: Node,\n  indent: string,\n  parentCondition?: string\n): string {\n  const selections = node.selections\n  if (selections == null) {\n    return ``\n  }\n  const printed = selections.map(selection =>\n    printSelection(selection, indent, parentCondition)\n  )\n  let selection = printed.join(`\\n` + indent + INDENT)\n  return printed.length ? ` {\\n${indent + INDENT}${selection}\\n${indent}}` : ``\n}\n\nfunction printSelection(\n  selection: Selection,\n  indent: string,\n  parentCondition?: string\n): string {\n  parentCondition = parentCondition || ``\n  let str = ``\n  if (selection.kind === `LinkedField`) {\n    if (selection.alias != null) {\n      str += selection.alias + `: `\n    }\n    str += selection.name\n    str += printArguments(selection.args)\n    str += parentCondition\n    str += printDirectives(selection.directives)\n    str += printHandles(selection)\n    str += printSelections(selection, indent + INDENT)\n  } else if (selection.kind === `ScalarField`) {\n    if (selection.alias != null) {\n      str += selection.alias + `: `\n    }\n    str += selection.name\n    str += printArguments(selection.args)\n    str += parentCondition\n    str += printDirectives(selection.directives)\n    str += printHandles(selection)\n  } else if (selection.kind === `InlineFragment`) {\n    str += `... on ` + selection.typeCondition.toString()\n    str += parentCondition\n    str += printDirectives(selection.directives)\n    str += printSelections(selection, indent + INDENT)\n  } else if (selection.kind === `FragmentSpread`) {\n    str += `...` + selection.name\n    str += parentCondition\n    str += printFragmentArguments(selection.args)\n    str += printDirectives(selection.directives)\n  } else if (selection.kind === `Condition`) {\n    const value = printValue(selection.condition)\n    // For Flow\n    invariant(\n      value != null,\n      `RelayPrinter: Expected a variable for condition, got a literal \\`null\\`.`\n    )\n    let condStr = selection.passingValue ? ` @include` : ` @skip`\n    condStr += `(if: ` + value + `)`\n    condStr += parentCondition\n    // For multi-selection conditions, pushes the condition down to each\n    const subSelections = selection.selections.map(sel =>\n      printSelection(sel, indent, condStr)\n    )\n    str += subSelections.join(`\\n` + INDENT)\n  } else {\n    invariant(\n      false,\n      `RelayPrinter: Unknown selection kind \\`%s\\`.`,\n      selection.kind\n    )\n  }\n  return str\n}\n\nfunction printArgumentDefinitions(\n  argumentDefinitions: Array<LocalArgumentDefinition>\n): string {\n  const printed = argumentDefinitions.map(def => {\n    let str = `$${def.name}: ${def.type.toString()}`\n    if (def.defaultValue != null) {\n      str += ` = ` + printLiteral(def.defaultValue, def.type)\n    }\n    return str\n  })\n  return printed.length ? `(\\n${INDENT}${printed.join(`\\n` + INDENT)}\\n)` : ``\n}\n\nfunction printFragmentArgumentDefinitions(\n  argumentDefinitions: Array<ArgumentDefinition>\n): string {\n  let printed\n  argumentDefinitions.forEach(def => {\n    if (def.kind !== `LocalArgumentDefinition`) {\n      return\n    }\n    printed = printed || []\n    let str = `${def.name}: {type: \"${def.type.toString()}\"`\n    if (def.defaultValue != null) {\n      str += `, defaultValue: ${printLiteral(def.defaultValue, def.type)}`\n    }\n    str += `}`\n    printed.push(str)\n  })\n  return printed && printed.length\n    ? ` @argumentDefinitions(\\n${INDENT}${printed.join(`\\n` + INDENT)}\\n)`\n    : ``\n}\n\nfunction printHandles(field: Field): string {\n  if (!field.handles) {\n    return ``\n  }\n  const printed = field.handles.map(handle => {\n    // For backward compatibility and also because this module is\n    // shared by ComponentScript.\n    const key =\n      handle.key === DEFAULT_HANDLE_KEY ? `` : `, key: \"${handle.key}\"`\n    const filters =\n      handle.filters == null\n        ? ``\n        : `, filters: ${JSON.stringify(handle.filters.sort())}`\n    return `@__clientField(handle: \"${handle.name}\"${key}${filters})`\n  })\n  return printed.length ? ` ` + printed.join(` `) : ``\n}\n\nfunction printDirectives(directives: Array<Directive>): string {\n  const printed = directives.map(\n    directive => `@` + directive.name + printArguments(directive.args)\n  )\n  return printed.length ? ` ` + printed.join(` `) : ``\n}\n\nfunction printFragmentArguments(args: Array<Argument>) {\n  const printedArgs = printArguments(args)\n  if (!printedArgs.length) {\n    return ``\n  }\n  return ` @arguments${printedArgs}`\n}\n\nfunction printArguments(args: Array<Argument>): string {\n  const printed = []\n  args.forEach(arg => {\n    const printedValue = printValue(arg.value, arg.type)\n    if (printedValue != null) {\n      printed.push(arg.name + `: ` + printedValue)\n    }\n  })\n  return printed.length ? `(` + printed.join(`, `) + `)` : ``\n}\n\nfunction printValue(value: ArgumentValue, type: ?GraphQLInputType): ?string {\n  if (value.kind === `Variable`) {\n    return `$${value.variableName}`\n  } else if (value.kind === `ObjectValue`) {\n    invariant(\n      type instanceof GraphQLInputObjectType,\n      `RelayPrinter: Need an InputObject type to print objects.`\n    )\n    const pairs = value.fields\n      .map(field => {\n        const typeFields = type.getFields()\n        const innerValue = printValue(field.value, typeFields[field.name].type)\n        return innerValue == null ? null : field.name + `: ` + innerValue\n      })\n      .filter(Boolean)\n\n    return `{${pairs.join(`, `)}}`\n  } else if (value.kind === `ListValue`) {\n    invariant(\n      type instanceof GraphQLList,\n      `RelayPrinter: Need a type in order to print arrays.`\n    )\n    const innerType = type.ofType\n    return `[${value.items.map(i => printValue(i, innerType)).join(`, `)}]`\n  } else if (value.value != null) {\n    return printLiteral(value.value, type)\n  } else {\n    return null\n  }\n}\n\nfunction printLiteral(value: mixed, type: ?GraphQLInputType): string {\n  if (type instanceof GraphQLNonNull) {\n    type = type.ofType\n  }\n  if (type instanceof GraphQLEnumType) {\n    invariant(\n      typeof value === `string`,\n      `RelayPrinter: Expected value of type %s to be a string, got \\`%s\\`.`,\n      type.name,\n      value\n    )\n    return value\n  }\n  if (Array.isArray(value)) {\n    invariant(\n      type instanceof GraphQLList,\n      `RelayPrinter: Need a type in order to print arrays.`\n    )\n    const itemType = type.ofType\n    return (\n      `[` + value.map(item => printLiteral(item, itemType)).join(`, `) + `]`\n    )\n  } else if (typeof value === `object` && value) {\n    const fields = []\n    invariant(\n      type instanceof GraphQLInputObjectType,\n      `RelayPrinter: Need an InputObject type to print objects.`\n    )\n    const typeFields = type.getFields()\n    forEachObject(value, (val, key) => {\n      fields.push(key + `: ` + printLiteral(val, typeFields[key].type))\n    })\n    return `{` + fields.join(`, `) + `}`\n  } else {\n    return JSON.stringify(value)\n  }\n}\n\nmodule.exports = { print }\n"]}