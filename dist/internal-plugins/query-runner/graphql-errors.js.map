{"version":3,"sources":["../../../src/internal-plugins/query-runner/graphql-errors.js"],"names":["multipleRootQueriesError","graphqlValidationError","graphqlError","handlers","name","node","kind","value","loc","formatFilePath","filePath","format","bold","blue","formatError","message","codeFrame","stripIndent","extractError","error","docRegex","matches","docName","exec","toString","index","lastIndex","findLocation","extractedMessage","def","location","enter","regex","handler","match","slice","getCodeFrame","query","lineNumber","column","linesAbove","linesBelow","getCodeFrameFromRelayError","start","source","body","line","otherDef","otherName","unifiedName","camelCase","upperFirst","yellow","green","errors","doc","length","locations","namePathMap","nameDefMap","get"],"mappings":"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","file":"graphql-errors.js","sourcesContent":["// @flow\n\nimport { print, visit, GraphQLError, getLocation } from \"graphql\"\nimport babelCodeFrame from \"babel-code-frame\"\nimport _ from \"lodash\"\nimport report from \"../../reporter\"\n\ntype RelayGraphQLError = Error & { validationErrors?: Object }\n\n// These handle specific errors throw by RelayParser. If an error matches\n// you get a pointer to the location in the query that is broken, otherwise\n// we show the error and the query.\nconst handlers = [\n  [\n    /Unknown field `(.+)` on type `(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Field` && node.name.value === name) {\n        return node.name.loc\n      }\n      return null\n    },\n  ],\n  [\n    /Unknown argument `(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Argument` && node.name.value === name) {\n        return node.name.loc\n      }\n      return null\n    },\n  ],\n  [\n    /Unknown directive `@(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Directive` && node.name.value === name) {\n        return node.name.loc\n      }\n      return null\n    },\n  ],\n]\n\nfunction formatFilePath(filePath: string) {\n  return `${report.format.bold(`file:`)} ${report.format.blue(filePath)}`\n}\n\nfunction formatError(message: string, filePath: string, codeFrame: string) {\n  return (\n    report.stripIndent`\n    ${message}\n\n      ${formatFilePath(filePath)}\n  ` + `\\n\\n${codeFrame}\\n`\n  )\n}\n\nfunction extractError(error: Error): { message: string, docName: string } {\n  const docRegex = /Invariant Violation: RelayParser: (.*). Source: document `(.*)` file:/g\n  let matches\n  let message = ``,\n    docName = ``\n  while ((matches = docRegex.exec(error.toString())) !== null) {\n    // This is necessary to avoid infinite loops with zero-width matches\n    if (matches.index === docRegex.lastIndex) docRegex.lastIndex++\n    ;[, message, docName] = matches\n  }\n  return { message, docName }\n}\n\nfunction findLocation(extractedMessage, def) {\n  let location = null\n  visit(def, {\n    enter(node) {\n      if (location) return\n      for (let [regex, handler] of handlers) {\n        let match = extractedMessage.match(regex)\n        if (!match) continue\n        if ((location = handler(match.slice(1), node))) break\n      }\n    },\n  })\n  return location\n}\n\nfunction getCodeFrame(query: string, lineNumber?: number, column?: number) {\n  return babelCodeFrame(query, lineNumber, column, {\n    linesAbove: 10,\n    linesBelow: 10,\n  })\n}\n\nfunction getCodeFrameFromRelayError(\n  def: any,\n  extractedMessage: string,\n  error: Error\n) {\n  let { start, source } = findLocation(extractedMessage, def) || {}\n  let query = source ? source.body : print(def)\n\n  // we can't reliably get a location without the location source, since\n  // the printed query may differ from the original.\n  let { line, column } = (source && getLocation(source, start)) || {}\n  return getCodeFrame(query, line, column)\n}\n\nexport function multipleRootQueriesError(\n  filePath: string,\n  def: any,\n  otherDef: any\n) {\n  let name = def.name.value\n  let otherName = otherDef.name.value\n  let unifiedName = `${_.camelCase(name)}And${_.upperFirst(\n    _.camelCase(otherName)\n  )}`\n\n  return formatError(\n    `Multiple \"root\" queries found in file: \"${name}\" and \"${otherName}\". ` +\n      `Only the first (\"${otherName}\") will be registered.`,\n    filePath,\n    `  ${report.format.yellow(`Instead of:`)} \\n\\n` +\n      babelCodeFrame(report.stripIndent`\n      query ${otherName} {\n        bar {\n          #...\n        }\n      }\n\n      query ${name} {\n        foo {\n          #...\n        }\n      }\n    `) +\n      `\\n\\n  ${report.format.green(`Do:`)} \\n\\n` +\n      babelCodeFrame(report.stripIndent`\n      query ${unifiedName} {\n        bar {\n          #...\n        }\n        foo {\n          #...\n        }\n      }\n    `)\n  )\n}\n\nexport function graphqlValidationError(\n  errors: Array<GraphQLError>,\n  filePath: string,\n  doc: any\n): string {\n  if (!errors || !errors.length) return ``\n  let error = errors[0]\n  let { source, locations: [{ line, column }] = [{}] } = error\n  let query = source ? source.body : print(doc)\n\n  return formatError(error.message, filePath, getCodeFrame(query, line, column))\n}\n\nexport function graphqlError(\n  namePathMap: Map<string, string>,\n  nameDefMap: Map<string, any>,\n  error: Error | RelayGraphQLError\n) {\n  let { message, docName } = extractError(error)\n  let filePath = namePathMap.get(docName)\n\n  if (filePath && docName) {\n    return formatError(\n      message,\n      filePath,\n      getCodeFrameFromRelayError(nameDefMap.get(docName), message, error)\n    )\n  }\n\n  message = `There was an error while compiling your site's GraphQL queries.\n  ${message}\n    `\n  if (error.message.match(/must be an instance of/)) {\n    message +=\n      `This usually means that more than one instance of 'graphql' is installed ` +\n      `in your node_modules. Remove all but the top level one or run \\`npm dedupe\\` to fix it.`\n  }\n\n  if (error.message.match(/Duplicate document/)) {\n    message += `${error.message.slice(21)}\\n`\n  }\n\n  return message\n}\n"]}