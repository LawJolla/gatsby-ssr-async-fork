{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-watcher.js"],"names":["_","require","chokidar","store","boundActionCreators","queryCompiler","default","queryRunner","invariant","normalize","exports","extractQueries","state","getState","pagesAndLayouts","pages","layouts","components","uniq","map","p","component","queryCompilerPromise","then","queries","forEach","query","get","replaceComponentQuery","text","componentPath","process","env","NODE_ENV","watch","watcher","add","runQueriesForComponent","getPagesForComponent","deleteComponentsDependencies","path","id","Promise","all","filter","watchComponent","rootDir","debounceCompile","debounce","JSON","stringify","on"],"mappings":"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","file":"query-watcher.js","sourcesContent":["/** *\n * Jobs of this module\n * - Maintain the list of components in the Redux store. So monitor new components\n *   and add/remove components.\n * - Watch components for query changes and extract these and update the store.\n * - Ensure all page queries are run as part of bootstrap and report back when\n *   this is done\n * - Whenever a query changes, re-run all pages that rely on this query.\n ***/\n\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\n\nconst { store } = require(`../../redux/`)\nconst { boundActionCreators } = require(`../../redux/actions`)\nconst queryCompiler = require(`./query-compiler`).default\nconst queryRunner = require(`./query-runner`)\nconst invariant = require(`invariant`)\nconst normalize = require(`normalize-path`)\n\nexports.extractQueries = () => {\n  const state = store.getState()\n  const pagesAndLayouts = [...state.pages, ...state.layouts]\n  const components = _.uniq(pagesAndLayouts.map(p => p.component))\n  const queryCompilerPromise = queryCompiler().then(queries => {\n    components.forEach(component => {\n      const query = queries.get(normalize(component))\n      boundActionCreators.replaceComponentQuery({\n        query: query && query.text,\n        componentPath: component,\n      })\n    })\n\n    return\n  })\n\n  // During development start watching files to recompile & run\n  // queries on the fly.\n  if (process.env.NODE_ENV !== `production`) {\n    watch()\n\n    // Ensure every component is being watched.\n    components.forEach(component => {\n      watcher.add(component)\n    })\n  }\n\n  return queryCompilerPromise\n}\n\nconst runQueriesForComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page & layout data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deleteComponentsDependencies(\n    pages.map(p => p.path || p.id)\n  )\n  const component = store.getState().components[componentPath]\n  return Promise.all(pages.map(p => queryRunner(p, component)))\n}\n\nconst getPagesForComponent = componentPath => {\n  const state = store.getState()\n  return [...state.pages, ...state.layouts].filter(\n    p => p.componentPath === componentPath\n  )\n}\n\nlet watcher\nexports.watchComponent = componentPath => {\n  // We don't start watching until mid-way through the bootstrap so ignore\n  // new components being added until then. This doesn't affect anything as\n  // when extractQueries is called from bootstrap, we make sure that all\n  // components are being watched.\n  if (watcher) {\n    watcher.add(componentPath)\n  }\n}\nconst watch = rootDir => {\n  if (watcher) return\n  const debounceCompile = _.debounce(() => {\n    queryCompiler().then(queries => {\n      const components = store.getState().components\n      queries.forEach(({ text }, id) => {\n        invariant(\n          components[id],\n          `${id} not found in the store components: ${JSON.stringify(\n            components\n          )}`\n        )\n\n        if (text !== components[id].query) {\n          boundActionCreators.replaceComponentQuery({\n            query: text,\n            componentPath: id,\n          })\n          runQueriesForComponent(id)\n        }\n      })\n    })\n  }, 100)\n\n  watcher = chokidar\n    .watch(`${rootDir}/src/**/*.{js,jsx,ts,tsx}`)\n    .on(`change`, path => {\n      debounceCompile()\n    })\n}\n"]}