{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-runner.js"],"names":["fs","require","joinPath","report","store","module","exports","pageOrLayout","component","schema","program","getState","graphql","query","context","result","errors","log","stripIndent","componentPath","_name","process","exit","contextKey","path","resultJSON","JSON","stringify","writeFile","directory","jsonName"],"mappings":";;;;;;AAAA;;;;AACA,MAAMA,KAAKC,QAAS,UAAT,CAAX;;AAEA,MAAM,EAAEC,QAAF,KAAeD,QAAS,kBAAT,CAArB;AACA,MAAME,SAASF,QAAS,gBAAT,CAAf;;AAEA,MAAM,EAAEG,KAAF,KAAYH,QAAS,aAAT,CAAlB;;AAEA;AACAI,OAAOC,OAAP,GAAiB,OAAOC,YAAP,EAAqBC,SAArB,KAAmC;AAClD,QAAM,EAAEC,MAAF,EAAUC,OAAV,KAAsBN,MAAMO,QAAN,EAA5B;;AAEA,QAAMC,UAAU,CAACC,KAAD,EAAQC,OAAR,KACd,sBAAgBL,MAAhB,EAAwBI,KAAxB,EAA+BC,OAA/B,EAAwCA,OAAxC,EAAiDA,OAAjD,CADF;;AAGA;AACA,MAAIC,MAAJ;;AAEA;AACA,MAAI,CAACP,UAAUK,KAAX,IAAoBL,UAAUK,KAAV,KAAqB,EAA7C,EAAgD;AAC9CE,aAAS,EAAT;AACD,GAFD,MAEO;AACLA,aAAS,MAAMH,QAAQJ,UAAUK,KAAlB,6BACVN,YADU,EAEVA,aAAaO,OAFH,EAAf;AAID;;AAED;AACA;AACA,MAAIC,UAAUA,OAAOC,MAArB,EAA6B;AAC3Bb,WAAOc,GAAP,CACEd,OAAOe,WAAY;iCACQV,UAAUW,aAAc;;;YAG7CJ,OAAOC,MAAP,IAAiB,EAAG;;YAEpBR,UAAUK,KAAM;OAPxB;;AAWA;AACA,QAAIH,QAAQU,KAAR,KAAmB,OAAvB,EAA+B;AAC7BC,cAAQC,IAAR,CAAa,CAAb;AACD;AACF;;AAED;AACA,MAAIC,aAAc,aAAlB;AACA,MAAI,CAAChB,aAAaiB,IAAlB,EAAwB;AACtBD,iBAAc,eAAd;AACD;AACDR,SAAOQ,UAAP,IAAqBhB,aAAaO,OAAlC;AACA,QAAMW,aAAaC,KAAKC,SAAL,CAAeZ,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAnB;;AAEA,QAAMf,GAAG4B,SAAH,CACJ1B,SAASQ,QAAQmB,SAAjB,EAA6B,QAA7B,EAAuC,MAAvC,EAA8CtB,aAAauB,QAA3D,CADI,EAEJL,UAFI,CAAN;AAID,CAnDD","file":"query-runner.js","sourcesContent":["import { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs-extra`)\n\nconst { joinPath } = require(`../../utils/path`)\nconst report = require(`../../reporter`)\n\nconst { store } = require(`../../redux`)\n\n// Run query for a page\nmodule.exports = async (pageOrLayout, component) => {\n  const { schema, program } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(schema, query, context, context, context)\n\n  // Run query\n  let result\n\n  // Nothing to do if the query doesn't exist.\n  if (!component.query || component.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(component.query, {\n      ...pageOrLayout,\n      ...pageOrLayout.context,\n    })\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    report.log(\n      report.stripIndent`\n        The GraphQL query from ${component.componentPath} failed\n\n        Errors:\n          ${result.errors || []}\n        Query:\n          ${component.query}\n      `\n    )\n\n    // Perhaps this isn't the best way to see if we're building?\n    if (program._name === `build`) {\n      process.exit(1)\n    }\n  }\n\n  // Add the path/layout context onto the results.\n  let contextKey = `pathContext`\n  if (!pageOrLayout.path) {\n    contextKey = `layoutContext`\n  }\n  result[contextKey] = pageOrLayout.context\n  const resultJSON = JSON.stringify(result, null, 4)\n\n  await fs.writeFile(\n    joinPath(program.directory, `.cache`, `json`, pageOrLayout.jsonName),\n    resultJSON\n  )\n}\n"]}