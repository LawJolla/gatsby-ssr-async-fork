{"version":3,"sources":["../../../src/internal-plugins/component-page-creator/gatsby-node.js"],"names":["globCB","require","Promise","_","chokidar","systemPath","glob","promisify","createPath","validatePath","exports","createPagesStatefully","store","boundActionCreators","options","doneCb","createPage","deletePage","program","getState","pagesDirectory","posix","join","directory","exts","extensions","map","e","slice","files","forEach","file","_createPage","watch","on","path","includes","push","pages","filter","p","component","page","f","filePath","relative"],"mappings":";;AAAA,MAAMA,SAASC,QAAS,MAAT,CAAf;AACA,MAAMC,UAAUD,QAAS,UAAT,CAAhB;AACA,MAAME,IAAIF,QAAS,QAAT,CAAV;AACA,MAAMG,WAAWH,QAAS,UAAT,CAAjB;AACA,MAAMI,aAAaJ,QAAS,MAAT,CAAnB;;AAEA,MAAMK,OAAOJ,QAAQK,SAAR,CAAkBP,MAAlB,CAAb;;AAEA,MAAMQ,aAAaP,QAAS,eAAT,CAAnB;AACA,MAAMQ,eAAeR,QAAS,iBAAT,CAArB;;AAEA;AACA;AACA;AACA;AACA;AACAS,QAAQC,qBAAR,GAAgC,OAC9B,EAAEC,KAAF,EAASC,mBAAT,EAD8B,EAE9BC,OAF8B,EAG9BC,MAH8B,KAI3B;AACH,QAAM,EAAEC,UAAF,EAAcC,UAAd,KAA6BJ,mBAAnC;AACA,QAAMK,UAAUN,MAAMO,QAAN,GAAiBD,OAAjC;AACA,QAAME,iBAAiBf,WAAWgB,KAAX,CAAiBC,IAAjB,CAAsBJ,QAAQK,SAA9B,EAA0C,YAA1C,CAAvB;AACA,QAAMC,OAAON,QAAQO,UAAR,CAAmBC,GAAnB,CAAuBC,KAAM,GAAEA,EAAEC,KAAF,CAAQ,CAAR,CAAW,EAA1C,EAA6CN,IAA7C,CAAmD,GAAnD,CAAb;;AAEA;AACA,MAAIO,QAAQ,MAAMvB,KAAM,GAAEc,cAAe,SAAQI,IAAK,GAApC,CAAlB;AACAK,QAAMC,OAAN,CAAcC,QAAQC,YAAYD,IAAZ,EAAkBX,cAAlB,EAAkCJ,UAAlC,CAAtB;;AAEA;AACAZ,WACG6B,KADH,CACU,GAAEb,cAAe,UAASI,IAAK,GADzC,EAEGU,EAFH,CAEO,KAFP,EAEaC,QAAQ;AACjB,QAAI,CAAChC,EAAEiC,QAAF,CAAWP,KAAX,EAAkBM,IAAlB,CAAL,EAA8B;AAC5BH,kBAAYG,IAAZ,EAAkBf,cAAlB,EAAkCJ,UAAlC;AACAa,YAAMQ,IAAN,CAAWF,IAAX;AACD;AACF,GAPH,EAQGD,EARH,CAQO,QARP,EAQgBC,QAAQ;AACpB;AACAvB,UACGO,QADH,GAEGmB,KAFH,CAESC,MAFT,CAEgBC,KAAKA,EAAEC,SAAF,KAAgBN,IAFrC,EAGGL,OAHH,CAGWY,QAAQ;AACfzB,iBAAW,EAAEkB,MAAMO,KAAKP,IAAb,EAAX;AACAN,cAAQA,MAAMU,MAAN,CAAaI,KAAKA,MAAMR,IAAxB,CAAR;AACD,KANH;AAOD,GAjBH,EAkBGD,EAlBH,CAkBO,OAlBP,EAkBe,MAAMnB,QAlBrB;AAmBD,CAlCD;AAmCA,MAAMiB,cAAc,CAACY,QAAD,EAAWxB,cAAX,EAA2BJ,UAA3B,KAA0C;AAC5D;AACA;AACA,MAAI,CAACP,aAAaJ,WAAWgB,KAAX,CAAiBwB,QAAjB,CAA0BzB,cAA1B,EAA0CwB,QAA1C,CAAb,CAAL,EAAwE;AACtE;AACD;;AAED;AACA,QAAMF,OAAO;AACXP,UAAM3B,WAAWY,cAAX,EAA2BwB,QAA3B,CADK;AAEXH,eAAWG;;AAGb;AALa,GAAb,CAMA5B,WAAW0B,IAAX;AACD,CAfD","file":"gatsby-node.js","sourcesContent":["const globCB = require(`glob`)\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\nconst systemPath = require(`path`)\n\nconst glob = Promise.promisify(globCB)\n\nconst createPath = require(`./create-path`)\nconst validatePath = require(`./validate-path`)\n\n// Path creator.\n// Auto-create pages.\n// algorithm is glob /pages directory for js/jsx/cjsx files *not*\n// underscored. Then create url w/ our path algorithm *unless* user\n// takes control of that page component in gatsby-node.\nexports.createPagesStatefully = async (\n  { store, boundActionCreators },\n  options,\n  doneCb\n) => {\n  const { createPage, deletePage } = boundActionCreators\n  const program = store.getState().program\n  const pagesDirectory = systemPath.posix.join(program.directory, `/src/pages`)\n  const exts = program.extensions.map(e => `${e.slice(1)}`).join(`,`)\n\n  // Get initial list of files.\n  let files = await glob(`${pagesDirectory}/**/?(${exts})`)\n  files.forEach(file => _createPage(file, pagesDirectory, createPage))\n\n  // Listen for new component pages to be added or removed.\n  chokidar\n    .watch(`${pagesDirectory}/**/*.{${exts}}`)\n    .on(`add`, path => {\n      if (!_.includes(files, path)) {\n        _createPage(path, pagesDirectory, createPage)\n        files.push(path)\n      }\n    })\n    .on(`unlink`, path => {\n      // Delete the page for the now deleted component.\n      store\n        .getState()\n        .pages.filter(p => p.component === path)\n        .forEach(page => {\n          deletePage({ path: page.path })\n          files = files.filter(f => f !== path)\n        })\n    })\n    .on(`ready`, () => doneCb())\n}\nconst _createPage = (filePath, pagesDirectory, createPage) => {\n  // Filter out special components that shouldn't be made into\n  // pages.\n  if (!validatePath(systemPath.posix.relative(pagesDirectory, filePath))) {\n    return\n  }\n\n  // Create page object\n  const page = {\n    path: createPath(pagesDirectory, filePath),\n    component: filePath,\n  }\n\n  // Add page\n  createPage(page)\n}\n"]}